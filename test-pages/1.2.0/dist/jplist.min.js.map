{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/1.2.0/controls/base/groups/base-controls-group.js","webpack:///./src/1.2.0/controls/base/controls/base.control.js","webpack:///./src/1.2.0/controls/base/groups/sort/base-sort-controls-group.js","webpack:///./src/1.2.0/controls/base/groups/filter/base-path-filter-controls-group.js","webpack:///./src/1.2.0/controls/base/controls/dropdown/base-dropdown.control.js","webpack:///./src/1.2.0/controls/base/groups/filter/base-text-filter-controls-group.js","webpack:///./src/1.2.0/controls/base/controls/filter/base-path-filter.control.js","webpack:///./src/1.2.0/controls/base/controls/sort/base-sort.control.js","webpack:///./src/1.2.0/controls/base/groups/mixins/buttons.mixin.js","webpack:///./src/1.2.0/actions/filter/filter.action.js","webpack:///./src/1.2.0/controls/base/controls/filter/base-text-filter.control.js","webpack:///./src/1.2.0/controls/base/groups/mixins/checkbox.mixin.js","webpack:///./src/1.2.0/controls/base/groups/mixins/radio-buttons.mixin.js","webpack:///./src/1.2.0/controls/base/groups/filter/base-range-filter-controls-group.js","webpack:///./src/1.2.0/controls/base/controls/filter/base-range-filter.control.js","webpack:///./src/1.2.0/controls/base/controls/filter/base-distance-filter.control.js","webpack:///./src/1.2.0/index.js","webpack:///./src/1.2.0/jplist.js","webpack:///./src/1.2.0/content/content-manager.js","webpack:///./src/1.2.0/actions/sort/sort.action.js","webpack:///./src/1.2.0/actions/pagination/pagination.action.js","webpack:///./src/1.2.0/services/deep-links.service.js","webpack:///./src/1.2.0/services/storage.service.js","webpack:///./src/1.2.0/controls/sort/hidden-sort/hidden-sort.control.js","webpack:///./src/1.2.0/controls/sort/buttons-sort/buttons-sort.control.js","webpack:///./src/1.2.0/controls/sort/radio-buttons-sort/radio-buttons-sort.control.js","webpack:///./src/1.2.0/controls/sort/checkbox-sort/checkbox-sort.control.js","webpack:///./src/1.2.0/controls/sort/select-sort/select-sort.control.js","webpack:///./src/1.2.0/controls/sort/dropdown-sort/dropdown-sort.control.js","webpack:///./src/1.2.0/controls/pagination/pagination.control.js","webpack:///./src/1.2.0/controls/base/groups/pagination/base-pagination-controls-group.js","webpack:///./src/1.2.0/controls/base/controls/pagination/base-pagination.control.js","webpack:///./src/1.2.0/controls/filter/text-filters/textbox-filter/textbox-filter.control.js","webpack:///./src/1.2.0/controls/filter/text-filters/checkbox-text-filter/checkbox-text-filter.control.js","webpack:///./src/1.2.0/controls/filter/text-filters/radio-buttons-text-filter/radio-buttons-text-filter.control.js","webpack:///./src/1.2.0/controls/filter/text-filters/buttons-text-filter/buttons-text-filter.control.js","webpack:///./src/1.2.0/controls/filter/path-filters/select-filter/select-filter.control.js","webpack:///./src/1.2.0/controls/filter/path-filters/checkbox-path-filter/checkbox-path-filter.control.js","webpack:///./src/1.2.0/controls/filter/path-filters/radio-buttons-path-filter/radio-buttons-path-filter.control.js","webpack:///./src/1.2.0/controls/filter/path-filters/buttons-path-filter/buttons-path-filter.control.js","webpack:///./src/1.2.0/controls/filter/path-filters/dropdown-filter/dropdown-filter.control.js","webpack:///./src/1.2.0/controls/filter/range-filters/buttons-range-filter/buttons-range-filter.control.js","webpack:///./src/1.2.0/controls/filter/range-filters/slider-range-filter/slider-range-filter.control.js","webpack:///./src/1.2.0/controls/base/controls/slider/base-slider.control.js","webpack:///./src/1.2.0/controls/filter/distance-filters/address-distance-filter/address-distance-filter.control.js","webpack:///./src/1.2.0/controls/base/groups/filter/base-distance-filter-controls-group.js","webpack:///./src/1.2.0/controls/no-results/no-results.control.js","webpack:///./src/1.2.0/controls/layout/layout.control.js","webpack:///./src/1.2.0/controls/reset/reset.control.js","webpack:///./src/1.2.0/controls/counter/counter.control.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BaseControlsGroup","group","controls","deepLinkParams","this","trim","toLowerCase","has","control","push","element","initialHTML","outerHTML","type","getAttribute","id","jump","BaseSortControlsGroup","sortOptions","concat","getSortOptions","baseSortControl","BaseSortControl","BasePathFilterControlsGroup","basePathFilterControl","BasePathFilterControl","options","getPathFilterOptions","BaseDropdownControl","panels","querySelectorAll","openedClass","panel","initialContent","innerHTML","contents","handlePanelsClick","length","addEventListener","e","atLeastOnePanelIsOpened","dropdownContent","classList","toggle","contains","add","remove","document","target","close","content","BaseTextFilterControlsGroup","getTextFilterOptions","baseTextFilterControl","BaseTextFilterControl","dl","map","text","filter","str","Array","from","Set","join","path","isInverted","or","BaseControl","dataType","order","regex","dateTimeFormat","multipleSortsNumber","getMultipleSortsNumber","index","pathsNumber","attributes","attr","match","exec","nodeName","propIndex","Number","isInteger","ignoreRegex","isEqual","props","k","superclass","checkboxes","radios","baseButtonControl","selected","deepLinkParam","find","param","handleRadios","handleCheckboxes","preventDefault","forEach","cb","isEqualTo","window","jplist","refresh","checked","latestSelectedRadio","radio","getLastSelectedRadio","cbArr","radioArr","combined","FilterAction","items","filtered","formattedText","replace","RegExp","item","elements","shouldBeAdded","el","elText","textContent","startsWith","endsWith","indexOf","querySelector","isNaN","parseFloat","isFinite","to","min","max","Math","itemElements","numbers","num","maxNumber","apply","minNumber","isNumeric","lat1","lng1","lat2","lng2","dLat","PI","dLng","a","sin","cos","atan2","sqrt","distance","round","latPath","lngPath","latAttr","lngAttr","maxDistance","userLat","userLng","distanceDisplayPath","itemsWithDistance","latElements","lngElements","lat","lng","calculateDistance","formattedDistance","formatDistance","displayElements","displayEl","style","display","sort","b","itemObj","initialText","_text","includeValue","baseControl","BaseRangeFilterControlsGroup","baseRangeFilterControl","BaseRangeFilterControl","getRangeFilterOptions","Infinity","BaseDistanceFilterControl","userAddress","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","createEvent","initCustomEvent","Event","controlTypes","Map","HiddenSortControl","ButtonsSortControl","RadioButtonsSortControl","CheckboxSortControl","SelectSortControl","DropdownSortControl","PaginationControl","TextboxFilterControl","CheckboxTextFilterControl","RadioButtonsTextFilterControl","ButtonsTextFilterControl","SelectFilterControl","DropdownFilterControl","CheckboxPathFilterControl","RadioButtonsPathFilterControl","ButtonsPathFilterControl","ButtonsRangeFilter","RangeSliderFilter","AddressDistanceFilterControl","NoResultsControl","DropdownControl","LayoutControl","ResetControl","CounterControl","jPList","init","resetControls","resetControl","resetContent","settings","assign","storage","storageName","cookiesExpiration","deepLinking","hashStart","ContentManager","splitByGroupAndName","body","groups","findGroups","jplistIndex","groupName","groupControls","controlIndex","findIndex","oldElement","div","createElement","newElement","firstChild","parentNode","replaceChild","splice","addControl","updateContentFunc","groupValueArr","itemsBlock","fragment","getItemsFragment","root","appendChild","filters","cGroupName","baseControlsGroups","collectControlsOptions","itemsNumber","SortAction","filterName","splitted","splitByLogic","orOptionsGroupName","handleFilter","and","paginationOptions","paginationAction","PaginationAction","currentPage","itemsPerPage","range","bcg","setPaginationOptions","paginatedItems","slice","start","end","sendStateEvent","updateDeepLink","getDeepLink","StorageService","set","option","filterType","textFilter","pathFilter","rangeFilter","distanceFilter","logic","performFilter","orFiltered","temp","result","orName","top","jumpEl","jumpElRect","getBoundingClientRect","width","height","getClientRects","clientTop","pageYOffset","scroll","stateEvent","jplistState","baseControlsGroup","dispatchEvent","textFilterOptions","pathFilterOptions","rangeFilterOptions","distanceFilterOptions","getDistanceFilterOptions","getPaginationOptions","createDocumentFragment","deepLink","hashStr","location","hash","href","substring","history","replaceState","deeplink","keys","deepLinkParts","groupsMap","groupElements","groupElement","groupValue","controlInstance","arr","DeepLinksService","getUrlParams","deepLinkSavedInStorage","controlClass","controlGroup","res","findControls","controlsByGroupNames","findControlGroups","sameNameControls","findSameNameControls","values","item1","item2","sortByIndex","sortHelper","optionsIndex","sortNumbers","sortDateTime","sortText","el1","el2","text1","text2","regexExpr","localeCompare","number1","number2","datetime1","datetime2","date1","date2","getDateFromString","Date","parse","getTime","dateTimeString","year","getDateWildcardValue","day","month","getMonthByWildcard","hour","minute","second","wildcard","datetimeString","regexValue","monthNumberOrName","monthIndex","months","monthAliasesArray","monthAlias","pagesNumber","ceil","prevPage","nextPage","halfRange","rangeStart","rangeEnd","parts","split","paramsMap","formattedHash","decodeURIComponent","currentGroupName","pair","getParam","groupValues","expiration","cValue","encodeURIComponent","exdate","cookie","setMinutes","getMinutes","toUTCString","isSupported","cookies","x","substr","y","atLeastOneNotSelectedCheckbox","checkbox","setAttribute","opt","dropdown","buttons","button","btnSortControl","setSelectedButton","getSelectedButton","deepLinkBtn","btn","btnValue","dropdownBtn","setPanelsContent","basePaginationControl","restoreFromDeepLink","pageButtonsHolder","btnTemplate","firstButtons","lastButtons","prevButtons","nextButtons","bindEventHandler","pageButtonClick","itemsPerPageSelects","updateItemsPerPageSelect","itemsPerPageDD","initCustomDropdowns","selectChange","labels","label","template","selects","select","toString","dd","selectedButton","removeChild","pageButton","selectedClass","setPageAttr","disabledClass","infos","html","info","classesToRemove","className","pageNumber","page","isEnabled","eventName","func","BasePaginationControlsGroup","BasePaginationControl","textChanged","clearButtonID","clearBtn","getElementById","selectFilterControl","btnPathFilterControl","SliderRangeFilter","rangeSliderFilterControl","sliderEl","val1Elements","val2Elements","minElements","maxElements","orientation","slider","BaseSliderControl","value1","value2","setValues","handler1","handler2","controlOptions","isVertical","callback","left","dragging","render","resize","stop","sendCallback","pos1","getInnerValue","pos2","update","newStart","newEnd","position","getHandlerPos","abs","handler1ZIndex","getComputedStyle","defaultView","getPropertyValue","handler2ZIndex","stopPropagation","setZIndex","handler","rect","size","xy","lefttop","getPreviewValue","rangeHeight","point","touches","pageX","clientX","pageY","clientY","vector","sub","v1","v2","geocodeApiKey","debounceTimeout","debounceDelay","baseDistanceFilterControl","addressInput","loadingIndicator","onAddressInputChange","address","clearTimeout","setTimeout","geocodeAddress","ctrl","hideDistanceDisplayElements","apiUrl","fetch","then","response","json","data","status","results","geometry","catch","BaseDistanceFilterControlsGroup","classNames","selectedClassName","groupClassName","handleSelectedControls","handleClasses","resetAllGroups","getLatestSelectedControl","addClassToGroups","cn","selectedGroupClassName","countValue","format","baseFilterControl","count","getStaticCounterValue","getDynamicCounterValue","getFilteredItems"],"mappings":"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","file":"jplist.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","/**\n * represents a group of controls with the same data-name and data-group attributes\n */\nclass BaseControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls, deepLinkParams = null){\n\n        this.group = (group || '').trim().toLowerCase();\n        this.name = (name || 'default').trim();\n        this.controls = controls || [];\n\n        this.deepLinkParams = [];\n\n        if(deepLinkParams && deepLinkParams.has(this.group)){\n\n            this.deepLinkParams = deepLinkParams.get(this.group) || [];\n        }\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     */\n    addControl(control){\n        if(!control || control.name !== this.name || control.group !== this.group) return;\n\n        this.controls.push(control);\n    }\n\n    /**\n     * by default control's deep link is empty\n     * @returns {string}\n     */\n    getDeepLink(){\n        return '';\n    }\n\n}\n\nexport default BaseControlsGroup;","/**\n * jPList Base Control\n * Each jPList control should extend this base control.\n */\nclass BaseControl{\n\n    /**\n     * control type defined in data-jplist-control attribute;\n     * for example, data-jplist-control=\"hidden-sort\" has type='hidden-sort'\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n\n        if(element) {\n\n            this.element = element;\n\n            /**\n             * element initial html\n             * @type {string}\n             */\n            this.element.initialHTML = element.outerHTML;\n\n            /**\n             * used to define appropriate class for the control\n             * @type {string} required\n             */\n            this.type = (element.getAttribute('data-jplist-control') || '').trim().toLowerCase();\n\n            /**\n             * used to define the elements group that is influenced by this control\n             * @type {string=} optional\n             */\n            this.group = (element.getAttribute('data-group') || '').trim().toLowerCase();\n\n            /**\n             * control name\n             * @type {string} optional\n             */\n            this.name = (element.getAttribute('data-name') || element.getAttribute('name') || 'default').trim();\n\n            /**\n             * deep link parameter name\n             * @type {string} optional\n             */\n            this.id = (element.getAttribute('data-id') || '').trim().toLowerCase();\n\n            /**\n             * jump to an element after the action;\n             * and CSS selector or \"top\" keyword\n             * @type {string} optional\n             */\n            this.jump = (element.getAttribute('data-jump') || '').trim();\n        }\n    }\n}\n\nexport default BaseControl;","import BaseControlsGroup from '../base-controls-group';\nimport BaseSortControl from '../../controls/sort/base-sort.control';\n\n/**\n * represents a group of sort controls with the same data-name and data-group attributes\n */\nclass BaseSortControlsGroup extends BaseControlsGroup{\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let sortOptions = [];\n\n        for(let control of this.controls){\n            sortOptions = sortOptions.concat(control.getSortOptions());\n        }\n\n        return sortOptions;\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseSortControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const baseSortControl = new BaseSortControl(control.element);\n\n        this.controls.push(baseSortControl);\n\n        return baseSortControl;\n    }\n}\n\nexport default BaseSortControlsGroup;\n","import BaseControlsGroup from '../base-controls-group';\nimport BasePathFilterControl from '../../controls/filter/base-path-filter.control';\n\n/**\n * represents a group of path filter controls with the same data-name and data-group attributes\n */\nclass BasePathFilterControlsGroup extends BaseControlsGroup{\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BasePathFilterControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const basePathFilterControl = new BasePathFilterControl(control.element);\n\n        this.controls.push(basePathFilterControl);\n\n        return basePathFilterControl;\n    }\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} path filer options\n     */\n    getPathFilterOptions(){\n\n        let options = [];\n\n        for(let control of this.controls){\n            options = options.concat(control.getPathFilterOptions());\n        }\n\n        return options;\n    }\n\n}\n\nexport default BasePathFilterControlsGroup;\n","import './base-dropdown.control.css';\n\n/**\n * base dropdown control\n */\nclass BaseDropdownControl{\n\n\n    /**\n     * control type defined in data-jplist-control attribute;\n     * for example, data-jplist-control=\"hidden-sort\" has type='hidden-sort'\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n\n        if(element) {\n\n            this.element = element;\n\n            if(!this.element) return;\n\n            //dropdown panel elements defined by data-type=\"panel\" data attribute; can be multiple;\n            this.panels = this.element.querySelectorAll('[data-type=\"panel\"]');\n            this.element.openedClass = (this.element.getAttribute('data-opened-class') || 'jplist-dd-opened').trim();\n\n            //keep panels initial html\n            for(let panel of this.panels){\n                panel.initialContent = panel.innerHTML;\n                panel.element = element;\n            }\n\n            //dropdown content elements defined by data-type=\"content\" data attribute; can be multiple;\n            this.contents = this.element.querySelectorAll('[data-type=\"content\"]');\n\n            //handle panels onclick event\n            this.handlePanelsClick();\n        }\n    }\n\n    /**\n     * handle panels onclick event\n     */\n    handlePanelsClick(){\n\n        if(!this.panels || this.panels.length <= 0) return;\n\n        for(let panel of this.panels){\n\n            /**\n             * on panel click\n             */\n            panel.addEventListener('click', e => {\n\n                //e.stopPropagation();\n\n                let atLeastOnePanelIsOpened = false;\n\n                for(let dropdownContent of this.contents){\n\n                    dropdownContent.classList.toggle(panel.element.openedClass);\n\n                    if(dropdownContent.classList.contains(panel.element.openedClass)){\n                        atLeastOnePanelIsOpened = true;\n                    }\n                }\n\n                if(atLeastOnePanelIsOpened){\n                    panel.classList.add(panel.element.openedClass);\n                    panel.element.classList.add(panel.element.openedClass);\n                }\n                else{\n                    panel.classList.remove(panel.element.openedClass);\n                    panel.element.classList.remove(panel.element.openedClass);\n                }\n            });\n        }\n\n        /**\n         * close dropdowns on body click\n         */\n        document.addEventListener('click', e => {\n\n            if (!this.element.contains(e.target)) { // or use: event.target.closest(selector) === null\n\n                this.close();\n            }\n        });\n    }\n\n    /**\n     * set panels content\n     * @param {string} content\n     */\n    setPanelsContent(content){\n\n        for(let panel of this.panels){\n            panel.innerHTML = content;\n        }\n    }\n\n    /**\n     * restore panels content\n     */\n    restorePanelsContent(){\n\n        for(let panel of this.panels){\n\n            if(panel.initialContent) {\n                panel.innerHTML = panel.initialContent;\n            }\n        }\n    }\n\n    /**\n     * close dropdown\n     */\n    close(){\n        for(let dropdownContent of this.contents){\n\n            dropdownContent.classList.remove(this.panels[0].element.openedClass);\n        }\n\n        for(let panel of this.panels){\n            panel.classList.remove(panel.element.openedClass);\n            panel.element.classList.remove(panel.element.openedClass);\n        }\n    }\n}\n\nexport default BaseDropdownControl;","import BaseControlsGroup from '../base-controls-group';\nimport BaseTextFilterControl from '../../controls/filter/base-text-filter.control';\n\n/**\n * represents a group of text filter controls with the same data-name and data-group attributes\n */\nclass BaseTextFilterControlsGroup extends BaseControlsGroup{\n\n    /**\n     * get text filter options from all controls in the group\n     * @return {Array.<object>} text filter options\n     */\n    getTextFilterOptions(){\n\n        let options = [];\n\n        for(let control of this.controls){\n            options = options.concat(control.getTextFilterOptions());\n        }\n\n        return options;\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseTextFilterControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const baseTextFilterControl = new BaseTextFilterControl(control.element);\n\n        this.controls.push(baseTextFilterControl);\n\n        return baseTextFilterControl;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        const dl = this.controls.map(control => control.id && control.text.trim() !== '' ? (control.id + '=' + control.text.trim()) : '').filter(str => str !== '');\n\n        const unique = Array.from(new Set(dl));\n        return unique.join('&');\n    }\n}\n\nexport default BaseTextFilterControlsGroup;\n","import BaseControl from '../base.control';\n\n/**\n * base path filter control\n */\nclass BasePathFilterControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * css selector or 'default' for the browser default order (no sort); if path is empty -> the whole element\n             * @type {string}\n             */\n            this.path = (element.getAttribute('data-path') || '').trim();\n\n            /**\n             * defines if path is inverted; if true, the path filter returns all items that DON'T contain the specified path\n             * @type {string}\n             */\n            this.isInverted = (element.getAttribute('data-inverted') || '').toLowerCase().trim() === 'true';\n\n            /**\n             * optional \"OR\" logic property, used to combine different filter controls with \"OR\" logic instead of \"AND\"\n             * @type {string|null}\n             */\n            this.or = element.getAttribute('data-or') || null;\n        }\n    }\n\n    /**\n     * get path filter options used in FilterAction.pathFilter method\n     * @return {Array.<{object}>} options\n     */\n    getPathFilterOptions(){\n\n        return {\n            path: this.path,\n            isInverted: this.isInverted,\n            or: this.or\n        };\n    }\n\n    /**\n     * check if current control has the same properties like the specified control\n     * @param {BasePathFilterControl} control\n     * @return {boolean}\n     */\n    isEqualTo(control){\n        return this.path === control.path && this.isInverted === control.isInverted;\n    }\n}\n\nexport default BasePathFilterControl;","import BaseControl from '../base.control';\n\n/**\n * base sort control\n */\nclass BaseSortControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * css selector or 'default' for the browser default order (no sort); if path is empty -> the whole element\n             * @type {string}\n             */\n            this.path = (element.getAttribute('data-path') || '').trim();\n\n            /**\n             * optional text (default), number or datetime\n             * @type {string}\n             */\n            this.dataType = (element.getAttribute('data-type') || 'text').trim().toLowerCase();\n\n            /**\n             * optional sort order: asc (default) or desc\n             * @type {string}\n             */\n            this.order = (element.getAttribute('data-order') || 'asc').trim().toLowerCase();\n\n            /**\n             * optional ignore regex - used to ignore characters before sort\n             * @type {string}\n             */\n            this.regex = element.getAttribute('data-regex') || '';\n\n            /**\n             * optional datetime format - datetime structure using wilcards {year}|{month}|{day}|{hour}|{min}|{sec}, for example: {month}/{day}/{year}\n             * @type {string}\n             */\n            this.dateTimeFormat = (element.getAttribute('data-date-format') || '').trim().toLowerCase();\n\n            /**\n             * this property indicates the number of data attribute groups [{data-path, data-order, ...}, {data-path-1, data-order-1,...}, ...]\n             * only data-path attribute is required;\n             * if multipleSortsNum > 0 => multiple sort\n             * @type {number}\n             */\n            this.multipleSortsNumber = this.getMultipleSortsNumber(element);\n\n            for(let index=1; index <= this.multipleSortsNumber; index++){\n                this['path' + index] = (element.getAttribute('data-path-' + index) || '').trim();\n                this['dataType' + index] = (element.getAttribute('data-type-' + index) || 'text').trim().toLowerCase();\n                this['order' + index] = (element.getAttribute('data-order-' + index) || 'asc').trim().toLowerCase();\n                this['regex' + index] = element.getAttribute('data-regex-' + index) || '';\n                this['dateTimeFormat' + index] = (element.getAttribute('data-date-format-' + index) || '').trim().toLowerCase();\n            }\n\n        }\n    }\n\n    /**\n     * multiple sort is defined by another sets of data attributes like {data-path-1, data-order-1,...}, {data-path-2, data-order-2,...} etc\n     * this method counts the number of such sets (= the number of attributes data-path-1, data-path-2, ...)\n     * @param {HTMLElement} element\n     * @return {number}\n     */\n    getMultipleSortsNumber(element){\n\n        let pathsNumber = 0;\n\n        for(let attr of element.attributes){\n\n            let match = null;\n            const regex = /^data-path-([0-9]+)$/g;\n\n            while (match = regex.exec(attr.nodeName)) {\n\n                const propIndex = Number(match[1]);\n\n                if(!Number.isInteger(propIndex)) continue;\n                pathsNumber++;\n            }\n        }\n\n        return pathsNumber;\n    }\n\n    /**\n     * get sort options used in SortAction.sort method\n     * @return {Array.<{path: string, dataType: text|number|datetime, order: asc|desc, ignoreRegex: string, dateTimeFormat: string}>} options\n     */\n    getSortOptions(){\n\n        const options = [];\n\n        //initial path is required\n        if(this.path){\n\n            options.push({\n                path: this.path,\n                dataType: this.dataType,\n                order: this.order,\n                ignoreRegex: this.ignoreRegex,\n                dateTimeFormat: this.dateTimeFormat\n            });\n\n            for(let index = 1; index <= this.multipleSortsNumber; index++){\n\n                options.push({\n                    path: this['path' + index],\n                    dataType: this['dataType' + index],\n                    order: this['order' + index],\n                    ignoreRegex: this['ignoreRegex' + index],\n                    dateTimeFormat: this['dateTimeFormat' + index]\n                });\n            }\n        }\n\n        return options;\n    }\n\n    /**\n     * check if current base sort control has the same properties like the specified base sort control\n     * @param {BaseSortControl} baseSortControl\n     * @return {boolean}\n     */\n    isEqualTo(baseSortControl){\n\n        let isEqual = true;\n\n        const props = ['path', 'dataType', 'order', 'regex', 'dateTimeFormat'];\n\n        for(let i=0; i<props.length; i++){\n\n            isEqual = isEqual && this[props[i]] === baseSortControl[props[i]];\n        }\n\n        isEqual = isEqual && this.multipleSortsNumber === baseSortControl.multipleSortsNumber;\n\n        for(let i=1; i <= this.multipleSortsNumber; i++){\n\n            for(let k=0; k<props.length; k++){\n\n                isEqual = isEqual && this[props[k] + i] === baseSortControl[props[k] + i];\n            }\n        }\n\n        return isEqual;\n    }\n}\n\nexport default BaseSortControl;\n","const SELECTED_CLASS = 'jplist-selected';\n\n/**\n * buttons mixin\n * used for multiple inheritance\n * usage example:\n * class ButtonsTextFilterControl extends ButtonsMixin(BaseTextFilterControlsGroup)\n * @param {class} superclass\n * @return {class}\n */\nconst ButtonsMixin = superclass => class extends superclass {\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.checkboxes = [];\n        this.radios = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        const baseButtonControl = super.addControl(control);\n\n        //get additional control properties\n        baseButtonControl.selected = baseButtonControl.element.getAttribute('data-selected') === 'true';\n        baseButtonControl.mode = baseButtonControl.element.getAttribute('data-mode') || 'radio';\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseButtonControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseButtonControl.id);\n\n            if(deepLinkParam){\n                baseButtonControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        if(baseButtonControl.mode === 'radio'){\n\n            this.radios.push(baseButtonControl);\n            this.handleRadios();\n        }\n\n        if(baseButtonControl.mode === 'checkbox'){\n\n            this.checkboxes.push(baseButtonControl);\n            this.handleCheckboxes();\n        }\n\n        /**\n         * on control click -> change the selected control\n         */\n        baseButtonControl.element.addEventListener('click', e => {\n\n            e.preventDefault();\n\n            if(baseButtonControl.mode === 'checkbox'){\n\n                baseButtonControl.selected = !baseButtonControl.selected;\n\n                this.checkboxes.forEach(cb => {\n\n                    if(cb.isEqualTo(baseButtonControl)){\n                        cb.selected = baseButtonControl.selected;\n                    }\n                });\n\n                this.handleCheckboxes();\n            }\n\n            if(baseButtonControl.mode === 'radio'){\n\n                for (let radio of this.radios) {\n                    radio.selected = false;\n                }\n\n                baseButtonControl.selected = true;\n\n                this.handleRadios();\n            }\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseButtonControl);\n            }\n        });\n    }\n\n    /**\n     * handle checkbox mode controls\n     */\n    handleCheckboxes(){\n\n        for(let cb of this.checkboxes){\n\n            if(cb.selected){\n                cb.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                cb.element.classList.remove(SELECTED_CLASS);\n            }\n\n            cb.element.checked = cb.selected;\n        }\n    }\n\n    /**\n     * get the latest selected radio\n     * @return {BasePathFilterControl} latestSelectedRadio\n     */\n    getLastSelectedRadio(){\n\n        let latestSelectedRadio = null;\n\n        //find the latest selected radio\n        for (let radio of this.radios) {\n\n            if (radio.selected) {\n                latestSelectedRadio = radio;\n            }\n        }\n\n        return latestSelectedRadio;\n    }\n\n    /**\n     * handle radio buttons\n     */\n    handleRadios(){\n\n        if(this.radios.length > 0) {\n\n            let latestSelectedRadio = this.getLastSelectedRadio();\n\n            //remove selected from all radios\n            for (let radio of this.radios) {\n\n                radio.selected = false;\n                radio.element.classList.remove(SELECTED_CLASS);\n            }\n\n            if(latestSelectedRadio) {\n\n                this.radios.forEach(radio => {\n\n                    if(radio.isEqualTo(latestSelectedRadio)){\n                        radio.selected = true;\n                        radio.element.checked = true;\n                        radio.element.classList.add(SELECTED_CLASS);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const cbArr = this.checkboxes.map(cb => {\n\n            if(cb.id){\n                return cb.selected ? cb.id + '=1' : cb.id + '=0';\n            }\n            else{\n                return '';\n            }\n\n        }).filter(str => str !== '');\n\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\n\n        const combined = cbArr.concat(radioArr);\n        const unique = Array.from(new Set(combined));\n        return unique.join('&');\n    }\n};\n\nexport default ButtonsMixin;","/**\n * filter action\n */\nclass FilterAction{\n\n    /**\n     * text filter\n     * this filter returns all items that contains the specified text in the given path\n     * @param {Array.<HTMLElement>} items\n     * @param {string} text\n     * @param {string=} path - any CSS selector or empty value meaning the whole element\n     * @param {string=} mode - contains (default), startsWith, endsWith, equal\n     * @param {string=} ignoreRegex - optional regex that defines what characters should be ignored\n     * @return {Array.<HTMLElement>} filtered items\n     */\n    static textFilter(items, text, path='', mode = 'contains', ignoreRegex = ''){\n\n        const filtered = [];\n\n        if(!items) return [];\n\n        if(path === 'default') return items;\n\n        const formattedText = text.replace(new RegExp(ignoreRegex, 'ig'), '').toLowerCase().trim();\n\n        for(let item of items){\n\n            const elements = path ? item.querySelectorAll(path) : [item];\n\n            if(!elements) continue;\n\n            let shouldBeAdded = false;\n\n            for(let el of elements){\n\n                const elText = el.textContent.replace(new RegExp(ignoreRegex, 'ig'), '').toLowerCase().trim();\n\n                switch(mode){\n\n                    case 'startsWith':{\n\n                        if(elText.startsWith(formattedText)){\n                            shouldBeAdded = true;\n                        }\n\n                        break;\n                    }\n\n                    case 'endsWith':{\n\n                        if(elText.endsWith(formattedText)){\n                            shouldBeAdded = true;\n                        }\n\n                        break;\n                    }\n\n                    case 'equal':{\n\n                        if(elText === formattedText){\n                            shouldBeAdded = true;\n                        }\n                        break;\n                    }\n\n                    default:{\n\n                        //contains\n                        if(elText.indexOf(formattedText) !== -1){\n                            shouldBeAdded = true;\n                        }\n\n                        break;\n                    }\n                }\n\n                if(shouldBeAdded) break;\n            }\n\n            if(shouldBeAdded){\n                filtered.push(item);\n            }\n        }\n\n        return filtered;\n    }\n\n    /**\n     * path filter\n     * only items with the given path are returned\n     * @param {Array.<HTMLElement>} items\n     * @param {string=} path - any CSS selector or empty value meaning the whole element\n     * @param {boolean} isInverted - if true, return all items that DON'T contain the specified path\n     * @return {Array.<HTMLElement>} filtered items\n     */\n    static pathFilter(items, path='', isInverted = false){\n\n        const filtered = [];\n\n        if(!items) return [];\n\n        if(path === 'default' || !path) return items;\n\n        for(let item of items){\n\n            const el = item.querySelector(path);\n\n            if(el && !isInverted || !el && isInverted){\n                filtered.push(item);\n            }\n        }\n\n        return filtered;\n    }\n\n    /**\n     * check if n is a number\n     * @param {*} n\n     * @returns {boolean}\n     */\n    static isNumeric(n)\n    {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    /**\n     * range filter\n     * return only elements that satisfy the following condition:\n     * all numbers in the element's content are in the following range: min <= from <= (all numbers in the element) <= to <= max\n     * @param {Array.<HTMLElement>} items\n     * @param {string=} path - any CSS selector or empty value meaning the whole element\n     * @param {number} from\n     * @param {number} to\n     * @param {number=} min\n     * @param {number=} max\n     * @return {Array.<HTMLElement>} filtered items\n     */\n    static rangeFilter(items, path='', from, to, min = from, max = to){\n\n        const filtered = [];\n\n        if(!items) return [];\n\n        if(path === 'default') return items;\n\n        from = Math.max(from, min);\n        to = Math.min(to, max);\n\n        for(let item of items){\n\n            const itemElements = path ? item.querySelectorAll(path) : [item];\n\n            if(!itemElements) continue;\n\n            //find all numbers within the element\n            const numbers = [];\n\n            for(let el of itemElements){\n\n                const num = Number(el.textContent.trim().replace(/[^-0-9.]+/g,''));\n\n                if(!isNaN(num)){\n                    numbers.push(num);\n                }\n            }\n\n            if(numbers.length > 0){\n\n                //find max and min number of all found within the element numbers\n                const maxNumber = Math.max.apply(Math, numbers);\n                const minNumber = Math.min.apply(Math, numbers);\n\n                let shouldBeAdded = true;\n\n                if(FilterAction.isNumeric(from) && from > minNumber){\n                    shouldBeAdded = false;\n                }\n\n                if(FilterAction.isNumeric(to) && maxNumber > to){\n                    shouldBeAdded = false;\n                }\n\n                if(shouldBeAdded){\n                    filtered.push(item);\n                }\n            }\n        }\n\n        return filtered;\n    }\n\n    /**\n     * calculate distance between two points using Haversine formula\n     * @param {number} lat1 - latitude of point 1\n     * @param {number} lng1 - longitude of point 1\n     * @param {number} lat2 - latitude of point 2\n     * @param {number} lng2 - longitude of point 2\n     * @return {number} distance in kilometers\n     */\n    static calculateDistance(lat1, lng1, lat2, lng2) {\n        const R = 6371; // Earth's radius in km\n        const dLat = (lat2 - lat1) * Math.PI / 180;\n        const dLng = (lng2 - lng1) * Math.PI / 180;\n        const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n                  Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n                  Math.sin(dLng/2) * Math.sin(dLng/2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n        const distance = R * c;\n        return distance;\n    }\n\n    /**\n     * format distance for display\n     * @param {number} distance - distance in kilometers\n     * @return {string} formatted distance\n     */\n    static formatDistance(distance) {\n        if (distance < 1) {\n            // Convert to meters if less than 1 km\n            return Math.round(distance * 1000) + ' m';\n        } else {\n            // Display in km with no decimal places\n            return Math.round(distance) + ' km';\n        }\n    }\n\n    /**\n     * distance filter\n     * filter and sort items based on distance from user's location\n     * @param {Array.<HTMLElement>} items\n     * @param {string} latPath - CSS selector for elements containing latitude attribute\n     * @param {string} lngPath - CSS selector for elements containing longitude attribute\n     * @param {string} latAttr - attribute name that contains latitude value\n     * @param {string} lngAttr - attribute name that contains longitude value\n     * @param {number|null} maxDistance - maximum distance in kilometers (optional)\n     * @param {number|null} userLat - user's latitude\n     * @param {number|null} userLng - user's longitude\n     * @param {string} distanceDisplayPath - CSS selector for element where distance will be displayed\n     * @return {Array.<HTMLElement>} filtered and sorted items\n     */\n    static distanceFilter(items, latPath, lngPath, latAttr, lngAttr, maxDistance, userLat, userLng, distanceDisplayPath) {\n        if (!items || !userLat || !userLng) return items;\n\n        // Array to store items with their distances\n        const itemsWithDistance = [];\n\n        for (let item of items) {\n            // Get elements containing lat/lng attributes\n            const latElements = latPath ? item.querySelectorAll(latPath) : [item];\n            const lngElements = lngPath ? item.querySelectorAll(lngPath) : [item];\n\n            if (!latElements.length || !lngElements.length) continue;\n\n            // Get lat/lng values from attributes\n            const lat = parseFloat(latElements[0].getAttribute(latAttr));\n            const lng = parseFloat(lngElements[0].getAttribute(lngAttr));\n\n            if (isNaN(lat) || isNaN(lng)) continue;\n\n            // Calculate distance\n            const distance = FilterAction.calculateDistance(userLat, userLng, lat, lng);\n\n            // Skip items beyond max distance if specified\n            if (maxDistance !== null && distance > maxDistance) continue;\n\n            // Store formatted distance on the item for display\n            item.distance = distance;\n            item.formattedDistance = FilterAction.formatDistance(distance);\n\n            // Update distance display element if specified\n            if (distanceDisplayPath) {\n                const displayElements = item.querySelectorAll(distanceDisplayPath);\n                for (let displayEl of displayElements) {\n                    displayEl.textContent = item.formattedDistance;\n                    displayEl.style.display = 'inline-block'; // Show the element\n                }\n            }\n\n            itemsWithDistance.push({\n                item: item,\n                distance: distance\n            });\n        }\n\n        // Sort by distance (ascending)\n        itemsWithDistance.sort((a, b) => a.distance - b.distance);\n\n        // Return sorted items\n        return itemsWithDistance.map(itemObj => itemObj.item);\n    }\n}\n\nexport default FilterAction;","import BaseControl from '../base.control';\n\n/**\n * base text filter control\n */\nclass BaseTextFilterControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * css selector or 'default' for the browser default order (no sort); if path is empty -> the whole element\n             * @type {string}\n             */\n            this.path = (element.getAttribute('data-path') || '').trim();\n\n            /**\n             * initial text value is used to handle multiple same control in different panels\n             * @type {string}\n             */\n            this.initialText = element.getAttribute('data-text') || element.value || '';\n\n            /**\n             * trimmed text value items filter by\n             * @type {string}\n             */\n            this._text = (element.getAttribute('data-text') || element.value || '').trim();\n\n            /**\n             * filter mode - contains (default), startsWith, endsWith, equal\n             * @type {string}\n             */\n            this.mode = (element.getAttribute('data-mode') || 'contains').trim();\n\n            /**\n             * optional ignore regex - used to ignore characters before sort\n             * @type {string}\n             */\n            this.regex = element.getAttribute('data-regex') || '';\n\n            /**\n             * optional \"OR\" logic property, used to combine different filter controls with \"OR\" logic instead of \"AND\"\n             * @type {string|null}\n             */\n            this.or = element.getAttribute('data-or') || null;\n        }\n    }\n\n    /**\n     * text setter\n     * @param {string} value\n     */\n    set text(value){\n\n        this.initialText = value || '';\n        this._text = (value || '').trim();\n    }\n\n    /**\n     * text getter\n     * @return {string}\n     */\n    get text(){\n\n        return this._text;\n    }\n\n\n    /**\n     * get text filter options used in FilterAction.textFilter method\n     * @return {Array.<{object}>} options\n     */\n    getTextFilterOptions(){\n\n        return {\n            path: this.path,\n            text: this.text,\n            mode: this.mode,\n            ignoreRegex: this.regex,\n            or: this.or\n        };\n    }\n\n    /**\n     * check if current control has the same properties like the specified control;\n     * the values could be different\n     * @param {BaseTextFilterControl} control\n     * @param {boolean} includeValue\n     * @return {boolean}\n     */\n    isEqualTo(control, includeValue = true){\n\n        let isEqual = this.path === control.path &&\n            this.mode === control.mode &&\n            this.regex === control.regex;\n\n        if(includeValue){\n            isEqual = isEqual && this.text === control.text;\n        }\n\n        return isEqual;\n    }\n}\n\nexport default BaseTextFilterControl;","const SELECTED_CLASS = 'jplist-selected';\n\n/**\n * checkbox mixin\n * used for multiple inheritance\n * usage example:\n * class CheckboxTextFilterControl extends CheckboxMixin(BaseTextFilterControlsGroup)\n * @param {class} superclass\n * @return {class}\n */\nconst CheckboxMixin = superclass => class extends superclass {\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.checkboxes = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        const baseControl = super.addControl(control);\n\n        //get additional control properties\n        baseControl.selected = baseControl.element.checked;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseControl.id);\n\n            if(deepLinkParam){\n                baseControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        this.checkboxes.push(baseControl);\n        this.handleCheckboxes();\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            baseControl.selected = !baseControl.selected;\n\n            this.checkboxes.forEach(cb => {\n\n                if(cb.isEqualTo(baseControl)){\n                    cb.selected = baseControl.selected;\n                }\n            });\n\n            this.handleCheckboxes();\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseControl);\n            }\n        });\n    }\n\n    /**\n     * handle checkbox mode controls\n     */\n    handleCheckboxes(){\n\n        for(let cb of this.checkboxes){\n\n            if(cb.selected){\n                cb.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                cb.element.classList.remove(SELECTED_CLASS);\n            }\n\n            cb.element.checked = cb.selected;\n        }\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const cbArr = this.checkboxes.map(cb => {\n\n            if(cb.id){\n                return cb.selected ? cb.id + '=1' : cb.id + '=0';\n            }\n            else{\n                return '';\n            }\n\n        }).filter(str => str !== '');\n        const unique = Array.from(new Set(cbArr));\n        return unique.join('&');\n    }\n};\n\nexport default CheckboxMixin;","const SELECTED_CLASS = 'jplist-selected';\n\n/**\n * radio buttons mixin\n * used for multiple inheritance\n * usage example:\n * class CheckboxTextFilterControl extends CheckboxMixin(BaseTextFilterControlsGroup)\n * @param {class} superclass\n * @return {class}\n */\nconst RadioButtonsMixin = superclass => class extends superclass {\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.radios = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        const baseControl = super.addControl(control);\n\n        //get additional control properties\n        baseControl.selected = baseControl.element.checked;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseControl.id);\n\n            if(deepLinkParam){\n                baseControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        this.radios.push(baseControl);\n        this.handleRadios();\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            for (let radio of this.radios) {\n                radio.selected = false;\n            }\n\n            baseControl.selected = true;\n\n            this.handleRadios();\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseControl);\n            }\n        });\n    }\n\n    /**\n     * get the latest selected radio\n     * @return {BasePathFilterControl} latestSelectedRadio\n     */\n    getLastSelectedRadio(){\n\n        let latestSelectedRadio = null;\n\n        //find the latest selected radio\n        for (let radio of this.radios) {\n\n            if (radio.selected) {\n                latestSelectedRadio = radio;\n            }\n        }\n\n        return latestSelectedRadio;\n    }\n\n    /**\n     * handle radio buttons\n     */\n    handleRadios(){\n\n        if(this.radios.length > 0) {\n\n            let latestSelectedRadio = this.getLastSelectedRadio();\n\n            //remove selected from all radios\n            for (let radio of this.radios) {\n\n                radio.selected = false;\n                radio.element.classList.remove(SELECTED_CLASS);\n            }\n\n            if(latestSelectedRadio) {\n\n                this.radios.forEach(radio => {\n\n                    if(radio.isEqualTo(latestSelectedRadio)){\n                        radio.selected = true;\n                        radio.element.checked = true;\n                        radio.element.classList.add(SELECTED_CLASS);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\n        const unique = Array.from(new Set(radioArr));\n        return unique.join('&');\n    }\n};\n\nexport default RadioButtonsMixin;","import BaseControlsGroup from '../base-controls-group';\nimport BaseRangeFilterControl from '../../controls/filter/base-range-filter.control';\n\n/**\n * represents a group of range filter controls with the same data-name and data-group attributes\n */\nclass BaseRangeFilterControlsGroup extends BaseControlsGroup{\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseRangeFilterControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const baseRangeFilterControl = new BaseRangeFilterControl(control.element);\n\n        this.controls.push(baseRangeFilterControl);\n\n        return baseRangeFilterControl;\n    }\n\n    /**\n     * get range filter options from all controls in the group\n     * @return {Array.<object>} range filer options\n     */\n    getRangeFilterOptions(){\n\n        let options = [];\n\n        for(let control of this.controls){\n            options = options.concat(control.getRangeFilterOptions());\n        }\n\n        return options;\n    }\n\n}\n\nexport default BaseRangeFilterControlsGroup;\n","import BaseControl from '../base.control';\n\n/**\n * base range filter control\n */\nclass BaseRangeFilterControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * css selector or 'default' for the browser initial list; if path is empty -> the whole element\n             * @type {string}\n             */\n            this.path = (element.getAttribute('data-path') || '').trim();\n\n            const from = element.getAttribute('data-from');\n\n            /**\n             * min <= from <= (all numbers in the element) <= to <= max\n             * @type {number}\n             */\n            this.from = from === null ? -Infinity : Number(from);\n\n            if(isNaN(this.from)){\n                this.from = -Infinity;\n            }\n\n            const to = element.getAttribute('data-to');\n\n            /**\n             * min <= from <= (all numbers in the element) <= to <= max\n             * @type {number}\n             */\n            this.to = to === null ? Infinity : Number(to);\n\n            if(isNaN(this.to)){\n                this.to = Infinity;\n            }\n\n            const min = element.getAttribute('data-min');\n\n            /**\n             * min <= from <= (all numbers in the element) <= to <= max\n             * @type {number}\n             */\n            this.min = min === null ? this.from : Number(min);\n\n            if(isNaN(this.min)){\n                this.min = this.from;\n            }\n\n            const max = element.getAttribute('data-max');\n\n            /**\n             * min <= from <= (all numbers in the element) <= to <= max\n             * @type {number}\n             */\n            this.max = max === null ? this.to : Number(max);\n\n            if(isNaN(this.max)){\n                this.max = this.to;\n            }\n\n            /**\n             * optional \"OR\" logic property, used to combine different filter controls with \"OR\" logic instead of \"AND\"\n             * @type {string|null}\n             */\n            this.or = element.getAttribute('data-or') || null;\n        }\n    }\n\n    /**\n     * get range filter options used in FilterAction.rangeFilter method\n     * @return {Array.<{object}>} options\n     */\n    getRangeFilterOptions(){\n\n        return {\n            path: this.path,\n            min: this.min,\n            from: this.from,\n            to: this.to,\n            max: this.max,\n            or: this.or\n        };\n    }\n\n    /**\n     * check if current control has the same properties like the specified control\n     * @param {BaseRangeFilterControl} control\n     * @return {boolean}\n     */\n    isEqualTo(control){\n        return this.path === control.path &&\n                this.from === control.from &&\n                this.to === control.to &&\n                this.min === control.min &&\n                this.max === control.max;\n    }\n}\n\nexport default BaseRangeFilterControl;","import BaseControl from '../base.control';\n\n/**\n * base distance filter control\n */\nclass BaseDistanceFilterControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * css selector for elements containing latitude attribute\n             * @type {string}\n             */\n            this.latPath = (element.getAttribute('data-lat-path') || '').trim();\n\n            /**\n             * css selector for elements containing longitude attribute\n             * @type {string}\n             */\n            this.lngPath = (element.getAttribute('data-lng-path') || '').trim();\n\n            /**\n             * attribute name that contains latitude value\n             * @type {string}\n             */\n            this.latAttr = (element.getAttribute('data-lat-attr') || 'data-lat').trim();\n\n            /**\n             * attribute name that contains longitude value\n             * @type {string}\n             */\n            this.lngAttr = (element.getAttribute('data-lng-attr') || 'data-lng').trim();\n\n            /**\n             * maximum distance in kilometers (optional)\n             * @type {number|null}\n             */\n            this.maxDistance = element.getAttribute('data-max-distance') ? \n                Number(element.getAttribute('data-max-distance')) : null;\n\n            /**\n             * optional \"OR\" logic property, used to combine different filter controls with \"OR\" logic instead of \"AND\"\n             * @type {string|null}\n             */\n            this.or = element.getAttribute('data-or') || null;\n\n            /**\n             * css selector for element where distance will be displayed\n             * @type {string}\n             */\n            this.distanceDisplayPath = (element.getAttribute('data-distance-display') || '').trim();\n\n            /**\n             * user's latitude\n             * @type {number|null}\n             */\n            this.userLat = null;\n\n            /**\n             * user's longitude\n             * @type {number|null}\n             */\n            this.userLng = null;\n\n            /**\n             * user's address\n             * @type {string}\n             */\n            this.userAddress = '';\n        }\n    }\n\n    /**\n     * get distance filter options used in FilterAction.distanceFilter method\n     * @return {object} options\n     */\n    getDistanceFilterOptions(){\n        return {\n            latPath: this.latPath,\n            lngPath: this.lngPath,\n            latAttr: this.latAttr,\n            lngAttr: this.lngAttr,\n            maxDistance: this.maxDistance,\n            userLat: this.userLat,\n            userLng: this.userLng,\n            userAddress: this.userAddress,\n            distanceDisplayPath: this.distanceDisplayPath,\n            or: this.or\n        };\n    }\n\n    /**\n     * check if current control has the same properties like the specified control\n     * @param {BaseDistanceFilterControl} control\n     * @return {boolean}\n     */\n    isEqualTo(control){\n        return this.latPath === control.latPath && \n               this.lngPath === control.lngPath && \n               this.latAttr === control.latAttr && \n               this.lngAttr === control.lngAttr && \n               this.maxDistance === control.maxDistance &&\n               this.userLat === control.userLat &&\n               this.userLng === control.userLng;\n    }\n}\n\nexport default BaseDistanceFilterControl;\n","/*\n\n           |----\n           |  /\n           |  \\\n           |----\n           |\n          /*\\\n         // \\\\\n        //   \\\\\n       //=====\\\\\n      //       \\\\\n----| |=========| |----\n \\  | |         | |  /\n /  | |    []   | |  \\\n----| |         | |----\n    | |    []   | |\n   /=\\|         |/=\\\n  //=\\\\    []   //=\\\\\n //===\\\\       //===\\\\\n//=====\\\\     //=====\\\\\n||=====||=====||=====||\n-----------------------\n|||||||||||||||||||||||\n-----------------------\n||       *****       ||\n||      |||||||      ||\n||     ||  |  ||     ||\n||    ||   |   ||    ||\n||    ||  (|)  ||    ||\n||   ||    |    ||   ||\n||   ||    |    ||   ||\n**===================**/\n\nimport jPList from './jplist';\n\n//sort\nimport HiddenSortControl from './controls/sort/hidden-sort/hidden-sort.control';\nimport ButtonsSortControl from './controls/sort/buttons-sort/buttons-sort.control';\nimport RadioButtonsSortControl from './controls/sort/radio-buttons-sort/radio-buttons-sort.control';\nimport CheckboxSortControl from './controls/sort/checkbox-sort/checkbox-sort.control';\nimport SelectSortControl from './controls/sort/select-sort/select-sort.control';\nimport DropdownSortControl from './controls/sort/dropdown-sort/dropdown-sort.control';\n\n//pagination\nimport PaginationControl from './controls/pagination/pagination.control';\n\n//text filter\nimport TextboxFilterControl from './controls/filter/text-filters/textbox-filter/textbox-filter.control';\nimport CheckboxTextFilterControl from './controls/filter/text-filters/checkbox-text-filter/checkbox-text-filter.control';\nimport RadioButtonsTextFilterControl from './controls/filter/text-filters/radio-buttons-text-filter/radio-buttons-text-filter.control';\nimport ButtonsTextFilterControl from './controls/filter/text-filters/buttons-text-filter/buttons-text-filter.control';\n\n//path filter\nimport SelectFilterControl from './controls/filter/path-filters/select-filter/select-filter.control';\nimport CheckboxPathFilterControl from './controls/filter/path-filters/checkbox-path-filter/checkbox-path-filter.control';\nimport RadioButtonsPathFilterControl from './controls/filter/path-filters/radio-buttons-path-filter/radio-buttons-path-filter.control';\nimport ButtonsPathFilterControl from './controls/filter/path-filters/buttons-path-filter/buttons-path-filter.control';\nimport DropdownFilterControl from './controls/filter/path-filters/dropdown-filter/dropdown-filter.control';\n\n//range filter\nimport ButtonsRangeFilter from './controls/filter/range-filters/buttons-range-filter/buttons-range-filter.control';\nimport RangeSliderFilter from './controls/filter/range-filters/slider-range-filter/slider-range-filter.control';\n\n//distance filter\nimport AddressDistanceFilterControl from './controls/filter/distance-filters/address-distance-filter/address-distance-filter.control';\n\n//other\nimport NoResultsControl from './controls/no-results/no-results.control';\nimport DropdownControl from './controls/base/controls/dropdown/base-dropdown.control';\nimport LayoutControl from './controls/layout/layout.control';\nimport ResetControl from './controls/reset/reset.control';\nimport CounterControl from './controls/counter/counter.control';\n\n(() => {\n    'use strict';\n\n    //custom events polyfill for IE 10+\n    //https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n    if (typeof window.CustomEvent !== 'function' ){\n\n        const CustomEvent = (event, params) => {\n            params = params || { bubbles: false, cancelable: false, detail: undefined };\n            var evt = document.createEvent( 'CustomEvent' );\n            evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n            return evt;\n        };\n\n        CustomEvent.prototype = window.Event.prototype;\n        window.CustomEvent = CustomEvent;\n    }\n\n    /**\n     * global jplist function, one per page\n     */\n    window.jplist = window.jplist || {};\n\n    /**\n     * registered control types\n     * @type {Map}\n     */\n    window.jplist.controlTypes = window.jplist.controlTypes || new Map([\n        ['hidden-sort', HiddenSortControl],\n        ['sort-buttons', ButtonsSortControl],\n        ['radio-buttons-sort', RadioButtonsSortControl],\n        ['checkbox-sort', CheckboxSortControl],\n        ['select-sort', SelectSortControl],\n        ['dropdown-sort', DropdownSortControl],\n\n        ['pagination', PaginationControl],\n\n        ['textbox-filter', TextboxFilterControl],\n        ['checkbox-text-filter', CheckboxTextFilterControl],\n        ['radio-buttons-text-filter', RadioButtonsTextFilterControl],\n        ['buttons-text-filter', ButtonsTextFilterControl],\n\n        ['select-filter', SelectFilterControl],\n        ['dropdown-filter', DropdownFilterControl],\n        ['checkbox-path-filter', CheckboxPathFilterControl],\n        ['radio-buttons-path-filter', RadioButtonsPathFilterControl],\n        ['buttons-path-filter', ButtonsPathFilterControl],\n\n        ['buttons-range-filter', ButtonsRangeFilter],\n        ['slider-range-filter', RangeSliderFilter],\n\n        ['address-distance-filter', AddressDistanceFilterControl],\n\n        ['no-results', NoResultsControl],\n        ['dropdown', DropdownControl],\n        ['layout', LayoutControl],\n        ['reset', ResetControl],\n        ['counter', CounterControl]\n    ]);\n\n    let jplist = new jPList();\n\n    /**\n     * external api\n     */\n    window.jplist.init = jplist.init.bind(jplist);\n    window.jplist.refresh = jplist.refresh.bind(jplist);\n    window.jplist.resetControls = jplist.resetControls.bind(jplist);\n    window.jplist.resetControl = jplist.resetControl.bind(jplist);\n    window.jplist.resetContent = jplist.resetContent.bind(jplist);\n})();","import ContentManager from './content/content-manager';\nimport BaseControl from \"./controls/base/controls/base.control\";\n\n/**\n * the main jPList class\n */\nexport default class jPList{\n\n    /**\n     * API: initialize jPList controls + elements from outside\n     * @param {Object} options\n     */\n    init(options){\n\n        this.settings = Object.assign({}, {\n\n            //storage\n            storage: '', //'', 'localStorage', 'sessionStorage', 'cookies'\n            storageName: 'jplist',\n            cookiesExpiration: -1, //cookies expiration in minutes (-1 = cookie expires when browser is closed)\n\n            //deep links\n            deepLinking: false,\n            hashStart: '#' //the start of the hash part, for example it may be '#!key='\n\n        }, options);\n\n        //find all controls split by data-group and data-name\n        this.controls = ContentManager.splitByGroupAndName(this.settings, document.body);\n\n        //find all jplist groups\n        this.elements = document.querySelectorAll('[data-jplist-group]');\n\n        //get from each group the data about its root and items;\n        //the received structure is: Map[groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>}>]\n        this.groups = ContentManager.findGroups(this.elements);\n\n        let items = [...document.querySelectorAll('[data-jplist-item]')];\n\n        //set jPList index for every element\n        //it's used to return to the default browser sorting if needed\n        for(let jplistIndex = 0; jplistIndex < items.length; jplistIndex++){\n\n            items[jplistIndex].jplistIndex = jplistIndex;\n        }\n\n        //first refresh\n        this.refresh('');\n    }\n\n    /**\n     * API: apply controls on content\n     * @param {string=} groupName - optional group name\n     * @param {BaseControl|undefined=} target - the element that triggered the event\n     */\n    refresh(groupName = '', target = undefined){\n        ContentManager.apply(this.settings, this.controls, this.groups, groupName, target);\n    }\n\n    /**\n     * API: reset control by CSS selector and apply it on content\n     * @param {HTMLElement} element\n     */\n    resetControl(element){\n\n        if(!element) return;\n\n        if(this.controls) {\n\n            for (let [groupName, groupControls] of this.controls) {\n                for (let group of groupControls) {\n                    let controlIndex = group.controls.findIndex(control => control.element === element);\n\n                    if(controlIndex >= 0){\n\n                        //find the control\n                        const control = group.controls[controlIndex];\n                        const oldElement = control.element;\n\n                        //create HTML element from outer HTML string\n                        const div = document.createElement('div');\n                        div.innerHTML = oldElement.initialHTML;\n                        const newElement = div.firstChild;\n\n                        if(oldElement.parentNode) {\n\n                            //replace HTML element in the DOM\n                            oldElement.parentNode.replaceChild(newElement, oldElement);\n\n                            //replace the control in the group\n                            group.controls.splice(controlIndex, 1);\n                            group.addControl(new BaseControl(newElement));\n\n                            //update state\n                            this.refresh(groupName);\n                        }\n\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * API: reset all jplist controls and apply them on content\n     * @param {string=} groupName\n     */\n    resetControls(groupName = ''){\n\n        if(this.controls) {\n\n            //this.controls is a Map: [groupName, [BaseControlsGroup1, BaseControlsGroup2, ...]]\n            for (let [groupName, groupControls] of this.controls) {\n\n                for (let group of groupControls) {\n\n                    for(let control of group.controls){\n\n                        if (!control.element || !control.element.initialHTML) continue;\n\n                        control.element.outerHTML = control.element.initialHTML;\n\n                    }\n                }\n            }\n        }\n\n        //find all controls split by data-group and data-name\n        this.controls = ContentManager.splitByGroupAndName(this.settings, document.body);\n\n        this.refresh(groupName);\n    }\n\n    /**\n     * API: refresh HTML content after add / remove items\n     * @param {Function} updateContentFunc\n     */\n    resetContent(updateContentFunc){\n\n        for(let [cGroupName, groupValueArr] of this.groups){\n\n            for(let itemsBlock of groupValueArr) {\n\n                //hide all elements moving them to the document fragment\n                let fragment = ContentManager.getItemsFragment(itemsBlock.items);\n\n                itemsBlock.root.appendChild(fragment);\n            }\n        }\n\n        if(updateContentFunc){\n            updateContentFunc(this.groups);\n        }\n\n        //find all jplist groups\n        this.elements = document.querySelectorAll('[data-jplist-group]');\n\n        //get from each group the data about its root and items;\n        //the received structure is: Map[groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>}>]\n        this.groups = ContentManager.findGroups(this.elements);\n\n        let items = [...document.querySelectorAll('[data-jplist-item]')];\n\n        //set jPList index for every element\n        //it's used to return to the default browser sorting if needed\n        for(let jplistIndex = 0; jplistIndex < items.length; jplistIndex++){\n\n            items[jplistIndex].jplistIndex = jplistIndex;\n        }\n\n        //first refresh\n        this.refresh('');\n\n    }\n\n}","import SortAction from '../actions/sort/sort.action';\nimport PaginationAction from '../actions/pagination/pagination.action';\nimport BaseControl from '../controls/base/controls/base.control';\nimport DeepLinksService from '../services/deep-links.service';\nimport StorageService from '../services/storage.service';\nimport FilterAction from '../actions/filter/filter.action';\n\n/**\n * content manager\n */\nclass ContentManager{\n\n    /**\n     * apply controls on the content groups\n     * @param {Object} settings\n     * @param {Map} controls - controls split by data-group and data-name: [groupName, [BaseControlsGroup1, BaseControlsGroup2, ...]]\n     * @param {Map} groups - [groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>] groups\n     * @param {string=} groupName - optional group name; if group name is empty or not provided -> refresh all groups\n     * @param {BaseControl|undefined=} target - the element that triggered the event\n     */\n    static apply(settings, controls, groups, groupName = '', target = undefined){\n\n        if(!controls || !groups) return;\n\n        const filters = [\n            {\n                options: 'pathFilterOptions',\n                name: 'pathFilter'\n            },\n            {\n                options: 'rangeFilterOptions',\n                name: 'rangeFilter'\n            },\n            {\n                options: 'textFilterOptions',\n                name: 'textFilter'\n            },\n            {\n                options: 'distanceFilterOptions',\n                name: 'distanceFilter'\n            }\n        ];\n\n        //group structure is Array.<{root: HTMLElement, items: Array.<HTMLElement>}>\n        for(let [cGroupName, groupValueArr] of groups){\n\n            if((groupName && groupName === cGroupName) || !groupName){\n\n                //get controls of this group;\n                //received controls array [BaseControlsGroup1, BaseControlsGroup2, ...]\n                const baseControlsGroups = controls.get(cGroupName);\n\n                //collect sort, pagination and filter options from all controls with the same group name\n                const options = ContentManager.collectControlsOptions(baseControlsGroups);\n\n                //there can be more than one block of items with the same group name\n                //each itemsBlock has structure: {root: HTMLElement, items: Array.<HTMLElement>}\n                for(let itemsBlock of groupValueArr){\n\n                    let itemsNumber = itemsBlock.items.length;\n\n                    //hide all elements moving them to the document fragment\n                    let fragment = ContentManager.getItemsFragment(itemsBlock.items);\n\n                    if(options.sortOptions && options.sortOptions.length > 0) {\n\n                        //sort the items of the group using sort options of all controls\n                        SortAction.sort(itemsBlock.items, options.sortOptions);\n                        fragment = ContentManager.getItemsFragment(itemsBlock.items);\n                    }\n\n                    let filtered = itemsBlock.items;\n                    for(let filter of filters){\n\n                        //pathFilterOptions, rangeFilterOptions, textFilterOptions or distanceFilterOptions\n                        const filterName = filter.options;\n\n                        if(options[filterName] && options[filterName].length > 0){\n\n                            const splitted = ContentManager.splitByLogic(options[filterName]);\n\n                            //apply \"AND\" filter\n                            filtered = ContentManager.handleFilter(filtered, splitted.and, 'and', filter.name);\n\n                            //apply \"OR\" filters\n                            for(let orOptionsGroupName in splitted.or){\n                                filtered = ContentManager.handleFilter(filtered, splitted.or[orOptionsGroupName], 'or', filter.name);\n                            }\n\n                            itemsNumber = filtered.length;\n                            fragment = ContentManager.getItemsFragment(filtered);\n                        }\n                    }\n\n                    if(options.paginationOptions){\n\n                        const paginationAction = new PaginationAction(\n                            options.paginationOptions.currentPage,\n                            options.paginationOptions.itemsPerPage,\n                            filtered.length,\n                            options.paginationOptions.range\n                        );\n\n                        //setPaginationOptions applies all computed properties of PaginationAction class to the latest pagination control\n                        if(baseControlsGroups.length > 0){\n\n                            for(let bcg of baseControlsGroups){\n                                if(bcg.setPaginationOptions){\n                                    bcg.setPaginationOptions(paginationAction);\n                                }\n                            }\n                        }\n\n                        const paginatedItems = filtered.slice(paginationAction.start, paginationAction.end);\n                        itemsNumber = paginatedItems.length;\n                        fragment = ContentManager.getItemsFragment(paginatedItems);\n                    }\n\n                    //return to HTML only relevant items\n                    itemsBlock.root.appendChild(fragment);\n\n                    //dispatch the event with different data about state of controls and items\n                    ContentManager.sendStateEvent(options, itemsNumber, baseControlsGroups, groups, filtered);\n                }\n\n                //if one of controls has data-jump attribute -> jump to the specified CSS selector or to the top\n                ContentManager.jump(baseControlsGroups, target);\n            }\n\n        }\n\n        if(settings.deepLinking) {\n\n            //update deep link if it's enabled\n            ContentManager.updateDeepLink(ContentManager.getDeepLink(controls, groups), settings.hashStart);\n        }\n        else{\n            if(settings.storage){\n\n                //update storage if it's enabled\n                StorageService.set(ContentManager.getDeepLink(controls, groups), settings.storage, settings.storageName, settings.cookiesExpiration);\n            }\n        }\n    }\n\n    /**\n     * perform filter\n     * @param {object} option\n     * @param {Array.<object>} filtered\n     * @param {string} filterType - 'textFilter', 'rangeFilter' or 'pathFilter'\n     * @returns {Array.<object>}\n     */\n    static performFilter(option, filtered, filterType){\n\n        switch(filterType){\n\n            case 'textFilter' : {\n                return FilterAction.textFilter(\n                    filtered,\n                    option.text,\n                    option.path,\n                    option.mode,\n                    option.ignoreRegex);\n            }\n\n            case 'pathFilter' : {\n                return FilterAction.pathFilter(filtered,\n                    option.path,\n                    option.isInverted);\n            }\n\n            case 'rangeFilter' : {\n                return FilterAction.rangeFilter(filtered,\n                    option.path,\n                    option.from,\n                    option.to,\n                    option.min,\n                    option.max);\n            }\n            \n            case 'distanceFilter' : {\n                return FilterAction.distanceFilter(filtered,\n                    option.latPath,\n                    option.lngPath,\n                    option.latAttr,\n                    option.lngAttr,\n                    option.maxDistance,\n                    option.userLat,\n                    option.userLng,\n                    option.distanceDisplayPath);\n            }\n        }\n\n        return filtered;\n    }\n\n    /**\n     * filter text / path / range\n     * @param {Array.<object>} filtered\n     * @param {Array.<object>} options\n     * @param {string} logic - 'or' / 'and'\n     * @param {string} filterType - 'textFilter', 'rangeFilter' or 'pathFilter'\n     * @returns {Array.<object>}\n     */\n    static handleFilter(filtered, options, logic, filterType){\n\n        if(options.length <= 0) return filtered;\n\n        if(logic === 'and'){\n            for(let option of options){\n                filtered = ContentManager.performFilter(option, filtered, filterType);\n            }\n        }\n\n        if(logic === 'or'){\n\n            let orFiltered = new Set();\n\n            for(let option of options){\n\n                let temp = ContentManager.performFilter(option, filtered, filterType);\n\n                orFiltered = new Set([...orFiltered, ...temp]);\n            }\n\n            filtered = Array.from(orFiltered);\n        }\n\n        return filtered;\n    }\n\n    /**\n     * split array of options by \"OR\" / \"AND\" logic\n     * all options with \"AND\" logic organize 1 group, \"OR\" options can organize multiple groups\n     * @param {Array.<object>} options\n     * @return {object}, {and: [option1, option2, ...], or: {'name1': [option1, options, ...], 'name2': [option1, options, ...], ...}}\n     */\n    static splitByLogic(options){\n\n        const result = {\n            and: [],\n            or: {}\n        };\n\n        for(let option of options){\n\n            const orName = option.or;\n\n            if(!orName){\n                result.and.push(option);\n            }\n            else{\n                if(result.or[orName] === undefined){\n                    result.or[orName] = [option];\n                }\n                else{\n                    result.or[orName].push(option);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * if one of controls has data-jump attribute -> jump to the specified CSS selector or to the top\n     * data-jump=\"any CSS selector or 'top' keyword\"\n     * examples: data-jump=\"header\"\n     *           data-jump=\".top-bar\"\n     *           data-jump=\"#main\"\n     *           data-jump=\"top\"\n     * @param {Array.<BaseControlsGroup>} baseControlsGroups - [BaseControlsGroup1, BaseControlsGroup2, ...]\n     * @param {BaseControl|undefined=} target - the element that triggered the event\n     * @history\n     *      - 21/08/2018 - fixed https://github.com/1rosehip/jplist-es6/issues/11\n     */\n    static jump(baseControlsGroups, target = undefined){\n\n        if(!target || !target.jump) return;\n\n        //if(!baseControlsGroups || baseControlsGroups.length <= 0) return;\n\n        //-1 means no scroll\n        let top = -1;\n\n        //top is always the upper ))\n        if(target.jump === 'top'){\n            top = 0;\n        }\n        else{\n            const jumpEl = document.querySelector(target.jump);\n\n            if(!jumpEl) return;\n\n            const jumpElRect = jumpEl.getBoundingClientRect();\n\n            //make sure element is not hidden or disconnected\n            if (!jumpEl.width && !jumpEl.height && !jumpEl.getClientRects().length) return;\n\n            const clientTop = document.clientTop || document.body.clientTop || 0;\n\n            if(top < 0){\n\n                //select the first jump path as the default value\n                top = jumpElRect.top + window.pageYOffset - clientTop;\n            }\n            else{\n                if(jumpElRect.top + window.pageYOffset - clientTop < top){\n                    top = jumpElRect.top + window.pageYOffset - clientTop;\n                }\n            }\n        }\n\n        if(top >= 0){\n            window.scroll(0, top);\n        }\n    }\n\n    /**\n     * send jPList general event with different data about state of controls and items\n     * @param {object} options\n     * @param {number} itemsNumber\n     * @param {BaseControlsGroup} baseControlsGroups\n     * @param {Map} groups - [groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>] groups\n     * @param {Array.<HTMLElement>} filtered\n     */\n    static sendStateEvent(options, itemsNumber, baseControlsGroups, groups, filtered){\n\n        if(!baseControlsGroups) return;\n\n        const stateEvent = new CustomEvent('jplist.state');\n\n        stateEvent.jplistState = {\n            options: options,\n            itemsNumber: itemsNumber,\n            groups: groups,\n            filtered: filtered\n        };\n\n        for(let baseControlsGroup of baseControlsGroups){\n\n            for(let control of baseControlsGroup.controls){\n\n                control.element.dispatchEvent(stateEvent);\n            }\n        }\n    }\n\n    /**\n     * collect sort, pagination and filter options from all controls with the same group name\n     * @param {Array.<BaseControlsGroup>} baseControlsGroups\n     * @return {object} sort, pagination and filter objects\n     */\n    static collectControlsOptions(baseControlsGroups){\n\n        const options = {\n\n            //there can be multiple sort options\n            sortOptions: [],\n\n            //there should be only one pagination options object;\n            //in case of multiple -> get the latest\n            paginationOptions: null,\n\n            //there can be multiple filter options\n            textFilterOptions: [],\n            pathFilterOptions: [],\n            rangeFilterOptions: [],\n            distanceFilterOptions: []\n        };\n\n        if(!baseControlsGroups) return options;\n\n        for(let baseControlsGroup of baseControlsGroups){\n\n            //get sort options only from sort controls\n            if(baseControlsGroup.getSortOptions) {\n\n                //add base control group sort options\n                options.sortOptions = options.sortOptions.concat(baseControlsGroup.getSortOptions());\n            }\n\n            //get text filter options only from text filter controls\n            if(baseControlsGroup.getTextFilterOptions) {\n\n                //add base control group sort options\n                options.textFilterOptions = options.textFilterOptions.concat(baseControlsGroup.getTextFilterOptions());\n            }\n\n            //get path filter options only from text filter controls\n            if(baseControlsGroup.getPathFilterOptions) {\n\n                //add base control group sort options\n                options.pathFilterOptions = options.pathFilterOptions.concat(baseControlsGroup.getPathFilterOptions());\n            }\n\n            //get range filter options only from range filter controls\n            if(baseControlsGroup.getRangeFilterOptions) {\n\n                //add base control group sort options\n                options.rangeFilterOptions = options.rangeFilterOptions.concat(baseControlsGroup.getRangeFilterOptions());\n            }\n\n            //get distance filter options only from distance filter controls\n            if(baseControlsGroup.getDistanceFilterOptions) {\n\n                //add base control group sort options\n                options.distanceFilterOptions = options.distanceFilterOptions.concat(baseControlsGroup.getDistanceFilterOptions());\n            }\n\n            if(baseControlsGroup.getPaginationOptions) {\n                options.paginationOptions = baseControlsGroup.getPaginationOptions();\n            }\n        }\n\n        return options;\n    }\n\n    /**\n     * get document fragment with the specified items\n     * @param {Array.<HTMLElement>} items\n     * @return {DocumentFragment}\n     */\n    static getItemsFragment(items){\n\n        const fragment = document.createDocumentFragment();\n\n        for(let item of items){\n            fragment.appendChild(item);\n        }\n\n        return fragment;\n    }\n\n    /**\n     * update deep link -> replace it in URL\n     * @param {string} deepLink\n     * @param {string} hashStart\n     */\n    static updateDeepLink(deepLink, hashStart = '#'){\n\n        let hashStr = deepLink.replace(hashStart, '').trim();\n\n        if(hashStr === ''){\n            hashStr = hashStart;\n        }\n        else{\n            hashStr = hashStart + hashStr;\n        }\n\n        if(window.location.hash !== hashStr){\n\n            const index = window.location.href.indexOf(hashStart);\n            let href;\n\n            if(index === -1){\n                href = window.location.href + hashStr;\n            }\n            else{\n                href = window.location.href.substring(0, index) + hashStr;\n            }\n\n            if('replaceState' in window.history){\n                window.history.replaceState('', '', href);\n            }\n            else{\n                window.location.replace(href);\n            }\n        }\n    }\n\n    /**\n     * update deep link URL according to the current controls states\n     * @return {string} deep link\n     */\n    static getDeepLink(controls, groups){\n\n        let deeplink = [];\n\n        //group structure is Array.<{root: HTMLElement, items: Array.<HTMLElement>}>\n        for(let cGroupName of groups.keys()){\n\n            //get controls of this group;\n            //received controls array [BaseControlsGroup1, BaseControlsGroup2, ...]\n            const baseControlsGroups = controls.get(cGroupName);\n\n            const deepLinkParts = [];\n            for(let baseControlsGroup of baseControlsGroups){\n\n                const dl = baseControlsGroup.getDeepLink();\n\n                if(dl){\n                    deepLinkParts.push(dl);\n                }\n            }\n\n            if(deepLinkParts.length > 0){\n                deeplink.push('group=' + cGroupName);\n                deeplink = deeplink.concat(deepLinkParts);\n            }\n        }\n\n        return deeplink.join('&');\n    }\n\n    /**\n     * find all groups of elements that should be sorted, filtered, etc.\n     * each group defined by data-jplist-group attribute;\n     * each element in the group defined by data-jplist-item attribute;\n     * @param {HTMLCollection} groups\n     * @return {Map} Map[groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>] groups\n     */\n    static findGroups(groups){\n\n        const groupsMap = new Map();\n\n        if(!groups){\n            return groupsMap;\n        }\n\n        //get all items with data attribute data-jplist-group\n        const groupElements = [...groups];\n\n        for(let groupElement of groupElements){\n\n            const groupName = groupElement.getAttribute('data-jplist-group');\n\n            let groupValue = [];\n\n            if(groupsMap.has(groupName)){\n                groupValue = groupsMap.get(groupName);\n            }\n\n            groupValue.push({\n\n                /**\n                 * the root element of the group\n                 */\n                root: groupElement,\n\n                /**\n                 * all group elements\n                 */\n                items: [...groupElement.querySelectorAll('[data-jplist-item]')],\n\n                /**\n                 * this fragment used as a container for invisible items\n                 */\n                fragment: document.createDocumentFragment()\n            });\n\n            groupsMap.set(groupName, groupValue);\n        }\n\n        return groupsMap;\n    }\n\n    /**\n     * find all controls defined on page by data-jplist-control attribute;\n     * control classes should be registered in window.jplist.controlTypes before using this method:\n     * window.jplist.controlTypes = new Map([\n     *      ['hidden-sort', HiddenSortControl],\n     *      ...\n     * ]);\n     * @param {HTMLElement} root\n     * @return {Array.<BaseControl>}\n     */\n    static findControls(root){\n\n        if(!root) return [];\n\n        const controls = [];\n\n        //find all control\n        const elements = root.querySelectorAll('[data-jplist-control]');\n\n        if(elements) {\n\n            for(let element of elements){\n\n                const controlType = element.getAttribute('data-jplist-control');\n\n                if(!controlType) continue;\n\n                const controlInstance = new BaseControl(element);\n                controls.push(controlInstance);\n            }\n        }\n\n        return controls;\n    }\n\n    /**\n     * split control by their data-group property\n     * @param {Array.<BaseControl>} controls\n     * @return {Map} [[groupName, controls array], [...], ...]\n     */\n    static findControlGroups(controls){\n\n        const map = new Map();\n\n        if(controls) {\n\n            for (let control of controls) {\n\n                let arr = [];\n\n                if (map.has(control.group)) {\n                    arr = map.get(control.group);\n                }\n\n                arr.push(control);\n\n                map.set(control.group, arr);\n            }\n        }\n\n        return map;\n    }\n\n    /**\n     * find controls with the same name\n     * @param {object} settings\n     * @param {Array.<BaseControl>} controls\n     * @return {Map} [[name, BaseControlsGroup], [...]]\n     */\n    static findSameNameControls(settings, controls){\n\n        const map = new Map();\n\n        if(controls){\n\n            let deepLinkParams = null;\n\n            if(settings.deepLinking){\n                deepLinkParams = DeepLinksService.getUrlParams(window.location.hash, settings.hashStart);\n            }\n            else{\n                if(settings.storage){\n\n                    const deepLinkSavedInStorage = StorageService.get(settings.storage, settings.storageName);\n                    deepLinkParams = DeepLinksService.getUrlParams(deepLinkSavedInStorage, '');\n                }\n            }\n\n            for(let control of controls){\n\n                //control with not defined type should be ignored\n                if(!control.type || !window.jplist.controlTypes.has(control.type)) continue;\n\n                //check if data-type class defined in window.jplist.controlTypes;\n                //it should be defined like this:\n                //window.jplist.controlTypes = window.jplist.controlTypes || new Map([\n                //    ['hidden-sort', HiddenSortControl],\n                //    ...\n                //]);\n                const controlClass = window.jplist.controlTypes.get(control.type);\n\n                if(controlClass){\n\n                    let controlGroup = null;\n\n                    if (map.has(control.name)) {\n                        controlGroup = map.get(control.name);\n                    }\n                    else{\n                        controlGroup = new controlClass(control.group, control.name, [], deepLinkParams);\n                    }\n\n                    controlGroup.addControl(control);\n\n                    map.set(control.name, controlGroup);\n                }\n            }\n        }\n\n        return map;\n    }\n\n    /**\n     * initialize controls and split them by group and name\n     * @param {object} settings\n     * @param {HTMLElement} root\n     * @return {Map} [groupName, [BaseControlsGroup1, BaseControlsGroup2, ...]]\n     */\n    static splitByGroupAndName(settings, root){\n\n        const res = new Map();\n\n        if(!root) return res;\n\n        //find all controls: received {Array.<BaseControl>}\n        const controls = ContentManager.findControls(root);\n\n        //split controls by their data-group attributes;\n        //the received structure is map: [[groupName, controls array], [...], ...]\n        const controlsByGroupNames = ContentManager.findControlGroups(controls);\n\n        for(let [groupName, groupControls] of controlsByGroupNames){\n\n            //received {Map} - [[name, BaseControlsGroup], [...]]\n            const sameNameControls = ContentManager.findSameNameControls(settings, groupControls);\n\n            let arr = [];\n\n            for(let baseControlsGroup of sameNameControls.values()){\n                arr.push(baseControlsGroup);\n            }\n\n            res.set(groupName, arr);\n        }\n\n        return res;\n    }\n}\n\nexport default ContentManager;","/**\n * sort action\n */\nclass SortAction{\n\n    /**\n     * general multiple sort\n     * @param {Array.<HTMLElement>} items\n     * @param {Array.<{path: string, dataType: text|number|datetime, order: asc|desc, ignoreRegex: string, dateTimeFormat: string}>} options\n     * if path = 'default' - the original sort should be kept\n     * @return {Array.<HTMLElement>} sorted items\n     */\n    static sort(items, options){\n\n        if(!options || options.length <= 0){\n\n            /**\n             * if no options - return to the default browser sort order\n             */\n            items.sort((item1, item2) => {\n                return SortAction.sortByIndex(item1, item2);\n            });\n\n            return items;\n        }\n\n        items.sort((item1, item2) => {\n\n            /**\n             * start recursive helper\n             */\n            return SortAction.sortHelper(item1, item2, options, 0);\n        });\n\n        return items;\n    }\n\n    /**\n     * recursive sort helper\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @param {Array.<Object>} options - structure: {path: string, dataType: text|number|datetime, order: asc|desc, ignoreRegex: string, dateTimeFormat: string}\n     * @param {number} optionsIndex\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortHelper(item1, item2, options, optionsIndex){\n\n        if(!options || options.length <= 0 || optionsIndex >= options.length){\n            return 0;\n        }\n\n        let result = 0;\n\n        const option = options[optionsIndex];\n\n        if(option.path !== 'default'){\n\n            switch(option.dataType){\n\n                case 'number': {\n                    result = SortAction.sortNumbers(item1, item2, option.path, option.order);\n                    break;\n                }\n\n                case 'datetime': {\n                    result = SortAction.sortDateTime(item1, item2, option.path, option.order, option.dateTimeFormat);\n                    break;\n                }\n\n                default: {\n                    result = SortAction.sortText(item1, item2, option.path, option.order, option.ignoreRegex);\n                    break;\n                }\n            }\n        }\n        else{\n            result = SortAction.sortByIndex(item1, item2);\n        }\n\n        if(result === 0 && optionsIndex + 1 < options.length){\n\n            //get next result recursive\n            result = SortAction.sortHelper(item1, item2, options, optionsIndex + 1);\n        }\n\n        return result;\n    }\n\n    /**\n     * sort texts\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @param {string=} path - can be any CSS selector - https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Selectors;\n     * empty path means the whole element; path shouldn't have 'default' value\n     * @param {string=} order - asc or desc\n     * @param {string=} ignoreRegex - optional regex that defines charaters that should be ignored before the sorting\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortText(item1, item2, path = '', order = 'asc', ignoreRegex = ''){\n\n        if(!item1 || !item2){\n            return 0;\n        }\n\n        //find elements with the content to sort\n        const el1 = path ? item1.querySelector(path) : item1;\n        const el2 = path ? item2.querySelector(path) : item2;\n\n        if(!el1 || !el2){\n            return 0;\n        }\n\n        let text1 = el1.textContent.trim().toLowerCase();\n        let text2 = el2.textContent.trim().toLowerCase();\n\n        if(ignoreRegex){\n\n            //regex expression that is used to remove irrelevant characters\n            const regexExpr = new RegExp(ignoreRegex, 'ig');\n            text1 = text1.replace(regexExpr, '').trim();\n            text2 = text2.replace(regexExpr, '').trim();\n        }\n\n        if(text1 === text2){\n            return 0;\n        }\n\n        if(!order){\n            order = 'asc';\n        }\n\n        //compare languages other than English\n        if(''.localeCompare){\n\n            if (order === 'asc') {\n                return text1.localeCompare(text2);\n            }\n            else {\n                return text2.localeCompare(text1);\n            }\n        }\n        else{\n            if (order === 'asc') {\n                return text1 > text2 ? 1 : -1;\n            }\n            else {\n                return text1 < text2 ? 1 : -1;\n            }\n        }\n    }\n\n    /**\n     * sort numbers\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @param {string=} path - can be any CSS selector - https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Selectors;\n     * empty path means the whole element; path shouldn't have 'default' value\n     * @param {string=} order - asc or desc\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortNumbers(item1, item2, path = '', order = 'asc'){\n\n        if(!item1 || !item2){\n            return 0;\n        }\n\n        //find elements with the content to sort\n        const el1 = path ? item1.querySelector(path) : item1;\n        const el2 = path ? item2.querySelector(path) : item2;\n\n        if(!el1 || !el2){\n            return 0;\n        }\n\n        let number1 = el1.textContent.trim().toLowerCase();\n        let number2 = el2.textContent.trim().toLowerCase();\n\n        //remove other characters\n        number1 = parseFloat(number1.replace(/[^-0-9.]+/g,''));\n        number2 = parseFloat(number2.replace(/[^-0-9.]+/g,''));\n\n        if(isNaN(number1) || isNaN(number2)){\n\n            if(isNaN(number1) && isNaN(number2)){\n                return 0;\n            }\n            else {\n                return isNaN(number1) ? 1 : -1;\n            }\n        }\n\n        if(number1 === number2){\n            return 0;\n        }\n\n        if(!order){\n            order = 'asc';\n        }\n\n        if(order === 'asc'){\n            return number1 - number2;\n        }\n        else{\n            return number2 - number1;\n        }\n    }\n\n\n    /**\n     * sort by initial element index\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortByIndex(item1, item2){\n\n        if(!item1 || !item2){\n            return 0;\n        }\n\n        let number1 = Number(item1.jplistIndex);\n        let number2 = Number(item2.jplistIndex);\n\n        if(isNaN(number1) || isNaN(number2)){\n            return 0;\n        }\n\n        return number1 - number2;\n    }\n\n    // ---------------- DATE TIME ------------------------\n\n    /**\n     * month name that can be used in date time strings\n     * from 0 for January to 11 for December\n     * @returns {Array.<Array.<string>>}\n     */\n    static get months() {\n\n        return [\n            ['january', 'jan', 'jan.'],\n            ['february', 'feb', 'feb.'],\n            ['march', 'mar', 'mar.'],\n            ['april', 'apr', 'apr.'],\n            ['may'],\n            ['june', 'jun.'],\n            ['july', 'jul', 'jul.'],\n            ['august', 'aug', 'aug.'],\n            ['september', 'sep', 'sep.'],\n            ['october', 'oct', 'oct.'],\n            ['november', 'nov', 'nov.'],\n            ['december', 'dec', 'dec.']\n        ];\n    }\n\n    /**\n     * sort datetime\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @param {string=} path - can be any CSS selector - https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Selectors;\n     * empty path means the whole element; path shouldn't have 'default' value;\n     * @param {string=} order - asc or desc\n     * @param {string=} dateTimeFormat - for example, {month}/{day}/{year}\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortDateTime(item1, item2, path = '', order = 'asc', dateTimeFormat = ''){\n\n        if(!item1 || !item2){\n            return 0;\n        }\n\n        //find elements with the content to sort\n        const el1 = path ? item1.querySelector(path) : item1;\n        const el2 = path ? item2.querySelector(path) : item2;\n\n        if(!el1 || !el2){\n            return 0;\n        }\n\n        let datetime1 = el1.textContent.trim().toLowerCase();\n        let datetime2 = el2.textContent.trim().toLowerCase();\n\n        let date1;\n        let date2;\n\n        dateTimeFormat = dateTimeFormat.trim();\n\n        if(!dateTimeFormat){\n\n            date1 = new Date(Date.parse(datetime1));\n            date2 = new Date(Date.parse(datetime2));\n        }\n        else{\n            date1 = SortAction.getDateFromString(datetime1, dateTimeFormat);\n            date2 = SortAction.getDateFromString(datetime2, dateTimeFormat);\n        }\n\n        if(date1.getTime() === date2.getTime()){\n            return 0;\n        }\n\n        if(!order){\n            order = 'asc';\n        }\n\n        if(order === 'asc'){\n            return date1.getTime() > date2.getTime() ? 1 : -1;\n        }\n        else{\n            return date1.getTime() < date2.getTime() ? 1 : -1;\n        }\n    }\n\n    /**\n     * get date time from string that contains wildcards like {year}, {month}, {day}, {hour}, {min}, {sec}\n     * @param {string} dateTimeString - for example, 01/12/2017\n     * @param {string} dateTimeFormat - for example, {month}/{day}/{year}\n     * @return {Date}\n     */\n    static getDateFromString(dateTimeString, dateTimeFormat){\n\n        //remove special characters\n        dateTimeFormat = dateTimeFormat.replace(/\\./g, '\\\\.');\n        dateTimeFormat = dateTimeFormat.replace(/\\(/g, '\\\\(');\n        dateTimeFormat = dateTimeFormat.replace(/\\)/g, '\\\\)');\n        dateTimeFormat = dateTimeFormat.replace(/\\[/g, '\\\\[');\n        dateTimeFormat = dateTimeFormat.replace(/\\]/g, '\\\\]');\n\n        //get year\n        let year = SortAction.getDateWildcardValue(dateTimeFormat, '{year}', dateTimeString);\n        year = Number(year) || 1900;\n\n        //get day\n        let day = SortAction.getDateWildcardValue(dateTimeFormat, '{day}', dateTimeString);\n        day = Number(day) || 1;\n\n        //get month: integer value representing the month, beginning with 0 for January to 11 for December\n        let month = SortAction.getDateWildcardValue(dateTimeFormat, '{month}', dateTimeString);\n        month = SortAction.getMonthByWildcard(month);\n        if(month === -1){\n            month = 0;\n        }\n\n        //get hour: (0-23)\n        let hour = SortAction.getDateWildcardValue(dateTimeFormat, '{hour}', dateTimeString);\n        hour = Number(hour) || 0;\n\n        //get minute: (0-59)\n        let minute = SortAction.getDateWildcardValue(dateTimeFormat, '{min}', dateTimeString);\n        minute = Number(minute) || 0;\n\n        //get second: (0-59)\n        let second = SortAction.getDateWildcardValue(dateTimeFormat, '{sec}', dateTimeString);\n        second = Number(second) || 0;\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    /**\n     * get datetime format section/item\n     * @param {string} dateTimeFormat - for example, {month}/{day}/{year} or any other string with wildcards; dateTimeFormat should not contain special characters like . ( ) [ ]\n     * @param {string} wildcard - {year}|{month}|{day}|{hour}|{min}|{sec}\n     * @param {string} datetimeString - for example, 01/15/2017\n     * @return {string|null} - returns the specified wildcard value, for example 2017 for {year} wildcard\n     */\n    static getDateWildcardValue(dateTimeFormat, wildcard, datetimeString){\n\n        let result = null;\n\n        //replace the specified wildcard with the (.*)\n        //for example, for wildcard=year the string can be: '{month}/{day}/{year}' => '{month}/{day}/(.*)'\n        let replacedFormat = dateTimeFormat.replace(wildcard, '(.*)');\n\n        //replace all other wildcard with .*\n        //for example above it will be: '.*/.*/(.*)'\n        const regexValue = replacedFormat.replace(/{year}|{month}|{day}|{hour}|{min}|{sec}/g, '.*');\n\n        //for example, run '.*/.*/(.*)' regex on 01/15/2017\n        const regex = new RegExp(regexValue, 'g');\n        const match = regex.exec(datetimeString);\n\n        //we get the wildcard value from the given string: 2017 in the example above\n        if(match && match.length > 1){\n            result = match[1];\n        }\n\n        return result;\n    }\n\n    /**\n     * get month number by string\n     * @param {string} monthNumberOrName - month number or name from date time string\n     * @return {number} from 0 for January to 11 for December; -1 if not found;\n     */\n    static getMonthByWildcard(monthNumberOrName){\n\n        monthNumberOrName = monthNumberOrName ? monthNumberOrName.trim().toLowerCase() : '';\n\n        let monthIndex = Number(monthNumberOrName);\n\n        if(!isNaN(monthIndex)){\n\n            if(monthIndex - 1 < 0){\n                return -1;\n            }\n            else {\n                return monthIndex - 1;\n            }\n        }\n\n        //find month index by value\n        return SortAction.months.findIndex((monthAliasesArray) => {\n\n            return monthAliasesArray.find(monthAlias => {\n                return monthAlias.trim() === monthNumberOrName;\n            });\n        });\n    }\n}\n\nexport default SortAction;","/**\n * pagination\n */\nclass PaginationAction{\n\n    /**\n     * Pagination\n     * @constructor\n     * @param {number} currentPage\n     * @param {number} itemsPerPage\n     * @param {number} itemsNumber\n     * @param {number} range\n     */\n    constructor(currentPage, itemsPerPage, itemsNumber, range){\n\n        this.itemsNumber = Number(itemsNumber) || 0;\n        this.itemsPerPage = Number.isInteger(itemsPerPage) ? Number(itemsPerPage) : this.itemsNumber;\n\n        if(this.itemsPerPage === 0){\n            this.itemsPerPage = itemsNumber;\n        }\n\n        this.pagesNumber = this.itemsPerPage === 0 ? 0 : Math.ceil(this.itemsNumber/this.itemsPerPage);\n\n        //validate current page\n        this.currentPage = Number(currentPage) || 0;\n\n        if(this.currentPage > this.pagesNumber - 1){\n            this.currentPage = 0;\n        }\n\n        this.start = this.currentPage * this.itemsPerPage;\n        this.end = this.start + this.itemsPerPage;\n\n        //validate the end\n        if(this.end > this.itemsNumber){\n            this.end = this.itemsNumber;\n        }\n\n        this.prevPage = this.currentPage <= 0 ? 0 : this.currentPage - 1;\n        this.nextPage = this.pagesNumber === 0 ? 0 : (this.currentPage >= this.pagesNumber - 1 ? this.pagesNumber - 1 : this.currentPage + 1);\n\n        this.range = Number(range) || 10;\n\n        const halfRange = Math.ceil((this.range - 1) / 2);\n        this.rangeStart = this.currentPage - halfRange;\n        this.rangeEnd = Math.min(this.rangeStart + this.range - 1, this.pagesNumber - 1);\n\n        if(this.rangeStart <= 0){\n            this.rangeStart = 0;\n            this.rangeEnd = Math.min(this.range - 1, this.pagesNumber - 1);\n        }\n\n        if(this.rangeEnd >= this.pagesNumber - 1){\n            this.rangeStart = Math.max(this.pagesNumber - this.range, 0);\n            this.rangeEnd = this.pagesNumber - 1;\n        }\n    }\n}\n\nexport default PaginationAction;","class DeepLinksService{\n\n    /**\n     * take param1=val1 and return an object of the structure { key: param1, value: val1 }\n     * @param param {string}\n     * @return {object|null}\n     */\n    static getParam(param){\n\n        if(!param) return null;\n\n        const parts = param.split('=');\n\n        if(parts.length < 2) return null;\n\n        return {\n            key: parts[0].trim().toLowerCase(),\n            value: parts[1].trim().toLowerCase()\n        };\n    }\n\n    /**\n     * get deep link parameters from URL\n     * @param {string} hash - window.location.hash value\n     * @param {string=} hashStart - optional value of hash start; by default it's '#', but can be changed for example to be '#!'\n     * @return {Map} params - structure: [groupName, [{key, value}, ...]], ...\n     *\n     * URL structure example:\n     * https://www.example.com?param1=val1&param2=val2#group=gr1&param1=val1&param2=val2&group=gr2&param1=val1&param2=val2...\n     */\n    static getUrlParams(hash, hashStart = '#'){\n\n        const paramsMap = new Map();\n\n        if(!hash) return paramsMap;\n\n        const formattedHash = window.decodeURIComponent(hash.replace(hashStart, '')).trim().toLowerCase();\n\n        if(!formattedHash) return paramsMap;\n\n        const params = formattedHash.split('&');\n\n        let currentGroupName = '';\n\n        for(let pair of params){\n\n            const param = DeepLinksService.getParam(pair);\n\n            if(!param) continue;\n\n            if(param.key === 'group'){\n\n                currentGroupName = param.value;\n\n                //insert group name if doesn't exist\n                if(!paramsMap.has(param.value)){\n\n                    paramsMap.set(param.value, []);\n                }\n            }\n            else{\n                const groupValues = paramsMap.get(currentGroupName);\n\n                if(groupValues){\n                    groupValues.push(param);\n                }\n\n                paramsMap.set(currentGroupName, groupValues);\n            }\n        }\n\n        return paramsMap;\n    }\n}\n\nexport default DeepLinksService;","/**\n * local storage, session storage, cookies\n */\nclass StorageService{\n\n    /**\n     * is storage supported?\n     * @param {string} storage - 'localStorage', 'sessionStorage', 'cookies'\n     * @return {boolean}\n     */\n    static isSupported(storage){\n\n        if(storage === 'cookies') return true;\n\n        try{\n            return storage in window && window[storage] !== null;\n        }\n        catch(e){\n            return false;\n        }\n    }\n\n    /**\n     * save to the storage\n     * @param {string} deepLink\n     * @param {string} storage - 'localStorage', 'sessionStorage', 'cookies'\n     * @param {string} key - storage key\n     * @param {number} expiration - cookie expiration in minutes (-1 = cookies expire when browser is closed)\n     */\n    static set(deepLink, storage, key, expiration = -1){\n\n        if(storage === 'cookies'){\n\n            const cValue = encodeURIComponent(deepLink);\n            const exdate = new Date();\n\n            expiration = Number(expiration) || -1;\n\n            if(expiration === -1){\n                document.cookie = name + '=' + cValue + ';path=/;';\n            }\n            else{\n                exdate.setMinutes(exdate.getMinutes() + expiration);\n                document.cookie = name + '=' + cValue + ';path=/; expires=' + exdate.toUTCString();\n            }\n        }\n        else{\n            if(StorageService.isSupported(storage)) {\n\n                //save json in storage\n                window[storage][key] = deepLink;\n            }\n        }\n    }\n\n    /**\n     * get from storage\n     * @param {string} storage - 'localStorage', 'sessionStorage', 'cookies'\n     * @param {string} key - storage key\n     * @return {string} deepLink\n     */\n    static get(storage, key){\n\n        let deepLink = '';\n\n        if(storage === 'cookies'){\n\n            //get document cookie\n            const cookies = document.cookie.split(';');\n\n            for (let i=0; i<cookies.length; i++){\n\n                let x = cookies[i].substr(0,cookies[i].indexOf('='));\n                let y = cookies[i].substr(cookies[i].indexOf('=') + 1);\n                x = x.replace(/^\\s+|\\s+$/g, '');\n\n                if(x === key){\n                    deepLink = decodeURIComponent(y);\n                    break;\n                }\n            }\n        }\n        else{\n            if(StorageService.isSupported(storage)) {\n                deepLink = window[storage][key] || '';\n            }\n        }\n\n        return deepLink;\n    }\n\n}\n\nexport default StorageService;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\n\n/**\n * hidden sort jPList control\n *\n * HTML structure:\n * ----------------\n * <div\n *      style=\"display: none\"\n *      data-jplist-control=\"hidden-sort\"\n *      data-group=\"group1\"\n *      data-path=\".title\"\n *      data-type=\"number\"> <!-- possible values: text, number, datetime -->\n * </div>\n *\n * Usage in JS:\n * -------------\n * import HiddenSort from './controls/sort/hidden-sort.control';\n * let control = document.getElementById('my-hidden-sort-control');\n * const hiddenSort = new HiddenSort(control);\n * console.log(hiddenSort.type);\n */\nclass HiddenSortControl extends BaseSortControlsGroup{}\n\nexport default HiddenSortControl;\n","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\n\nconst SELECTED_CLASS = 'jplist-selected';\n\n/**\n * sort buttons jPList control\n *\n * Usage:\n * <button\n *  data-jplist-control=\"sort-buttons\"\n *  data-path=\".title\"          <!-- required -->\n *  data-group=\"group1\"         <!-- required -->\n *  data-order=\"asc\"            <!-- optional, asc (default) / desc -->\n *  data-type=\"text\"            <!-- optional, text (default) / number / datetime -->\n *  data-name=\"sort1\"           <!-- required for radio mode -->\n *  data-selected=\"true\"        <!-- optional, true / false (default) -->\n *  data-datetime-format=\"{month}/{day}/{year}\" <!-- optional -->\n *  data-regex=\"\"               <!-- optional -->\n *  data-id=\"deep-link-name1\"   <!-- optional, used as deep link url and storage parameter -->\n *  data-mode=\"radio\">          <!-- optional, radio (default) / checkbox -->\n *  Sort by title asc\n * </button>\n *\n * Optional deep link: #deepLinkName1=1&deepLinkName2=1\n * selected value - 1\n * non selected - should not appear in deep link or any value !== 1\n */\nclass ButtonsSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.checkboxes = [];\n        this.radios = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        const baseSortControl = super.addControl(control);\n\n        //get additional control properties\n        baseSortControl.selected = baseSortControl.element.getAttribute('data-selected') === 'true';\n        baseSortControl.mode = baseSortControl.element.getAttribute('data-mode') || 'radio';\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n                baseSortControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        if(baseSortControl.mode === 'radio'){\n\n            this.radios.push(baseSortControl);\n            this.handleRadios();\n        }\n\n        if(baseSortControl.mode === 'checkbox'){\n\n            this.checkboxes.push(baseSortControl);\n            this.handleCheckboxes();\n        }\n\n        /**\n         * on control click -> change the selected control\n         */\n        baseSortControl.element.addEventListener('click', e => {\n\n            e.preventDefault();\n\n            if(baseSortControl.mode === 'checkbox'){\n\n                baseSortControl.selected = !baseSortControl.selected;\n\n                this.checkboxes.forEach(cb => {\n\n                    if(cb.isEqualTo(baseSortControl)){\n                        cb.selected = baseSortControl.selected;\n                    }\n                });\n\n                this.handleCheckboxes();\n            }\n\n            if(baseSortControl.mode === 'radio'){\n\n                for (let radio of this.radios) {\n                    radio.selected = false;\n                }\n\n                baseSortControl.selected = true;\n\n                this.handleRadios();\n            }\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseSortControl);\n            }\n        });\n    }\n\n    /**\n     * handle checkbox mode controls\n     */\n    handleCheckboxes(){\n\n        for(let cb of this.checkboxes){\n\n            if(cb.selected){\n                cb.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                cb.element.classList.remove(SELECTED_CLASS);\n            }\n        }\n    }\n\n    /**\n     * get the latest selected radio\n     * @return {BaseSortControl} latestSelectedRadio\n     */\n    getLastSelectedRadio(){\n\n        let latestSelectedRadio = null;\n\n        //find the latest selected radio\n        for (let radio of this.radios) {\n\n            if (radio.selected) {\n                latestSelectedRadio = radio;\n            }\n        }\n\n        return latestSelectedRadio;\n    }\n\n    /**\n     * handle radio mode controls\n     */\n    handleRadios(){\n\n        if(this.radios.length > 0) {\n\n            let latestSelectedRadio = this.getLastSelectedRadio();\n\n            //remove selected from all radios\n            for (let radio of this.radios) {\n\n                radio.selected = false;\n                radio.element.classList.remove(SELECTED_CLASS);\n            }\n\n            if(latestSelectedRadio) {\n\n                this.radios.forEach(radio => {\n\n                    if(radio.isEqualTo(latestSelectedRadio)){\n                        radio.selected = true;\n                        radio.element.checked = true;\n                        radio.element.classList.add(SELECTED_CLASS);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let sortOptions = [];\n\n        let atLeastOneNotSelectedCheckbox = false;\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                sortOptions = sortOptions.concat(checkbox.getSortOptions());\n            }\n            else{\n                atLeastOneNotSelectedCheckbox = true;\n            }\n        }\n\n        if(atLeastOneNotSelectedCheckbox){\n            sortOptions = sortOptions.concat([\n                {\n                    path: 'default'\n                }\n            ]);\n        }\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            sortOptions = sortOptions.concat(latestSelectedRadio.getSortOptions());\n        }\n\n        return sortOptions;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const cbArr = this.checkboxes.map(cb => cb.id && cb.selected ? cb.id + '=1' : '').filter(str => str !== '');\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\n        const combined = cbArr.concat(radioArr);\n        const unique = Array.from(new Set(combined));\n        return unique.join('&');\n    }\n}\n\nexport default ButtonsSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\n\nconst SELECTED_CLASS = 'jplist-selected';\n\n/**\n * radio buttons sort control\n *\n * Usage:\n * <label>\n *  <input\n *      type=\"radio\"\n *      data-jplist-control=\"radio-buttons-sort\"\n *      data-path=\".title\"           <!-- required -->\n *      data-group=\"group1\"          <!-- required -->\n *      data-order=\"asc\"             <!-- optional, asc (default) / desc -->\n *      data-type=\"text\"             <!-- optional, text (default) / number / datetime -->\n *      data-datetime-format=\"{month}/{day}/{year}\" <!-- optional -->\n *      data-regex=\"\"                <!-- optional -->\n *      data-id=\"deep-link-name1\"    <!-- optional, used as deep link url and storage parameter -->\n *      name=\"sort1\"\n *      checked>\n *          Sort by title asc\n *  </input>\n * </label>\n *\n * Optional deep link: #deepLinkName1=1\n * selected value - 1\n * non selected - should not appear in deep link\n */\nclass RadioButtonsSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n        this.radios = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        const baseSortControl = super.addControl(control);\n\n        //get additional control properties\n        baseSortControl.selected = baseSortControl.element.checked;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n                baseSortControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        this.radios.push(baseSortControl);\n        this.handleRadios();\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseSortControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            for (let radio of this.radios) {\n                radio.selected = false;\n            }\n\n            baseSortControl.selected = true;\n\n            this.handleRadios();\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseSortControl);\n            }\n        });\n    }\n\n    /**\n     * get the latest selected radio\n     * @return {BaseSortControl} latestSelectedRadio\n     */\n    getLastSelectedRadio(){\n\n        let latestSelectedRadio = null;\n\n        //find the latest selected radio\n        for (let radio of this.radios) {\n\n            if (radio.selected) {\n                latestSelectedRadio = radio;\n            }\n        }\n\n        return latestSelectedRadio;\n    }\n\n    /**\n     * handle radio mode controls\n     */\n    handleRadios(){\n\n        if(this.radios.length > 0) {\n\n            let latestSelectedRadio = this.getLastSelectedRadio();\n\n            //remove selected from all radios\n            for (let radio of this.radios) {\n\n                radio.selected = false;\n                radio.element.classList.remove(SELECTED_CLASS);\n            }\n\n            if(latestSelectedRadio) {\n\n                this.radios.forEach(radio => {\n\n                    if(radio.isEqualTo(latestSelectedRadio)){\n\n                        radio.selected = true;\n                        radio.element.checked = true;\n                        radio.element.classList.add(SELECTED_CLASS);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let sortOptions = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            sortOptions = sortOptions.concat(latestSelectedRadio.getSortOptions());\n        }\n\n        return sortOptions;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\n        const unique = Array.from(new Set(radioArr));\n        return unique.join('&');\n    }\n}\n\nexport default RadioButtonsSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\n\nconst SELECTED_CLASS = 'jplist-selected';\n\n/**\n * checkbox sort control\n *\n * Usage:\n * <label>\n *  <input\n *      type=\"checkbox\"\n *      data-jplist-control=\"checkbox-sort\"\n *      data-path=\".title\"           <!-- required -->\n *      data-group=\"group1\"          <!-- required -->\n *      data-order=\"asc\"             <!-- optional, asc (default) / desc -->\n *      data-type=\"text\"             <!-- optional, text (default) / number / datetime -->\n *      data-datetime-format=\"{month}/{day}/{year}\" <!-- optional -->\n *      data-regex=\"\"                <!-- optional -->\n *      data-id=\"deep-link-name1\"    <!-- optional, used as deep link url and storage parameter -->\n *      checked>\n *          Sort by title asc\n *  </input>\n * </label>\n * Optional deep link: #deepLinkName1=1\n * selected value - 1\n * non selected - 0\n */\nclass CheckboxSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.checkboxes = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        const baseSortControl = super.addControl(control);\n\n        //get additional control properties\n        baseSortControl.selected = baseSortControl.element.checked;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n                baseSortControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        this.checkboxes.push(baseSortControl);\n        this.handleCheckboxes();\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseSortControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            baseSortControl.selected = !baseSortControl.selected;\n\n            this.checkboxes.forEach(cb => {\n\n                if(cb.isEqualTo(baseSortControl)){\n                    cb.selected = baseSortControl.selected;\n                }\n            });\n\n            this.handleCheckboxes();\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseSortControl);\n            }\n        });\n    }\n\n    /**\n     * handle checkbox mode controls\n     */\n    handleCheckboxes(){\n\n        for(let cb of this.checkboxes){\n\n            if(cb.selected){\n                cb.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                cb.element.classList.remove(SELECTED_CLASS);\n            }\n\n            cb.element.checked = cb.selected;\n        }\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let sortOptions = [];\n\n        let atLeastOneNotSelectedCheckbox = false;\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                sortOptions = sortOptions.concat(checkbox.getSortOptions());\n            }\n            else{\n                atLeastOneNotSelectedCheckbox = true;\n            }\n        }\n\n        //any number of non selected checkboxes -> 1 default option\n        if(atLeastOneNotSelectedCheckbox){\n            sortOptions = sortOptions.concat([\n                {\n                    path: 'default'\n                }\n            ]);\n        }\n\n        return sortOptions;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const cbArr = this.checkboxes.map(cb => {\n\n            if(cb.id){\n                return cb.selected ? cb.id + '=1' : cb.id + '=0';\n            }\n            else{\n                return '';\n            }\n\n        }).filter(str => str !== '');\n\n        const unique = Array.from(new Set(cbArr));\n        return unique.join('&');\n    }\n}\n\nexport default CheckboxSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\nimport BaseSortControl from '../../base/controls/sort/base-sort.control';\n\n/**\n * select sort control\n *  <select\n *        data-jplist-control=\"select-sort\"\n *        data-group=\"group1\"\n *        data-name=\"name1\"\n *        data-id=\"deep-link-name1\">  <!-- optional, used as deep link url and storage parameter -->\n *\n *        <option\n *          data-path=\"default\"\n *          value=\"0\"\n *          selected>Sort by</option>\n *\n *        <option\n *          value=\"1\"\n *          data-path=\".title\"\n *          data-order=\"asc\"\n *          data-type=\"text\">Title A-Z</option>\n *\n *        <option\n *          value=\"2\"\n *          data-path=\".title\"\n *          data-order=\"desc\"\n *          data-type=\"text\">Title Z-A</option>\n *    </select>\n *\n *    option may have the following attributes:\n *    ------------------------------------------\n *    data-path - required CSS path selector\n *    data-order - optional, asc (default) / desc\n *    data-type=\"text\" - optional, text (default) / number / datetime\n *    data-datetime-format=\"{month}/{day}/{year}\" - optional datetime format\n *    data-regex -  optional ignore regex\n */\nclass SelectSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.options = [];\n        this.selected = '';\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        const baseSortControl = super.addControl(control);\n\n        let options = baseSortControl.element.querySelectorAll('option');\n\n        for(let option of options){\n\n            option.setAttribute('data-name', this.name);\n            option.setAttribute('data-group', this.group);\n\n            if(!this.options.find(opt => opt.element.value === option.value)){\n                this.options.push(new BaseSortControl(option));\n            }\n        }\n\n        this.selected = baseSortControl.element.value;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            this.id = baseSortControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n                baseSortControl.element.value = deepLinkParam.value;\n                this.selected = deepLinkParam.value;\n            }\n        }\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseSortControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            this.selected = e.target.value;\n\n            for(let select of this.controls){\n                select.element.value = this.selected;\n            }\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseSortControl);\n            }\n        });\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let selected = this.options.find(opt => opt.element.value === this.selected);\n\n        if(selected){\n            return selected.getSortOptions();\n        }\n\n        return [];\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        let selected = this.options.find(opt => opt.element.value === this.selected);\n\n        if(this.id){\n            return this.id + '=' + selected.element.value;\n        }\n\n        return '';\n    }\n}\n\nexport default SelectSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\nimport BaseSortControl from '../../base/controls/sort/base-sort.control';\nimport BaseDropdownControl from '../../base/controls/dropdown/base-dropdown.control';\n\n/**\n * dropdown sort control\n */\nclass DropdownSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n        this.selected = null;\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        //a dropdown has the following custom properties:\n        //  -- dropdown - custom dropdown behaviour, styles, classes\n        //  -- buttons - the list of dropdown buttons, each of them is BaseSortControl\n        const baseSortControl = super.addControl(control);\n\n        //generate dropdown instance for the given control;\n        //this instance adds dropdown classes, styles and behaviour\n        baseSortControl.dropdown = new BaseDropdownControl(control.element);\n        baseSortControl.buttons = [];\n\n        //each button inside dropdown is a separate sort control that defined by data-path attribute;\n        //they are stored in baseSortControl.buttons array\n        let buttons = baseSortControl.element.querySelectorAll('[data-path]');\n\n        for(let button of buttons){\n\n            //all buttons inherits data-name and data-group attributes of the root dropdown\n            button.setAttribute('data-name', this.name);\n            button.setAttribute('data-group', this.group);\n            button.setAttribute('data-jump', baseSortControl.jump);\n\n            let btnSortControl = new BaseSortControl(button);\n\n            //save newly created button in the baseSortControl.buttons array\n            baseSortControl.buttons.push(btnSortControl);\n\n            /**\n             * on control button click -> update the selected control\n             */\n            btnSortControl.element.addEventListener('click', e => {\n\n                e.preventDefault();\n\n                //clicked button should be the selected one\n                this.selected = btnSortControl;\n\n                this.setSelectedButton(baseSortControl);\n\n                for(let control of this.controls){\n                    if(control.dropdown){\n                        control.dropdown.close();\n                    }\n                }\n\n                if(window.jplist) {\n\n                    window.jplist.refresh(this.group, btnSortControl);\n                }\n            });\n        }\n\n        this.selected = DropdownSortControl.getSelectedButton(baseSortControl.buttons);\n        this.setSelectedButton(baseSortControl);\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            this.id = baseSortControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n\n                const deepLinkBtn = baseSortControl.buttons.find(btn => {\n\n                    const btnValue = btn.element.getAttribute('data-value');\n                    return (deepLinkParam.value === btnValue) ? btn : null;\n                });\n\n                if(deepLinkBtn) {\n                    this.selected = deepLinkBtn;\n                    this.setSelectedButton(baseSortControl);\n                }\n            }\n        }\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        if(this.selected){\n            return this.selected.getSortOptions();\n        }\n\n        return [];\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        if(this.id && this.selected){\n            return this.id + '=' + this.selected.element.getAttribute('data-value') || '';\n        }\n\n        return '';\n    }\n\n    /**\n     * get selected button that has data-selected=\"true\" data attribute;\n     * if there is no data-selected attribute -> take the first button\n     * @param {Array.<BaseSortControl>} buttons\n     * @return {BaseSortControl|null}\n     */\n    static getSelectedButton(buttons){\n\n        if(buttons.length <= 0) return null;\n\n        for(let button of buttons){\n            if(button.element.getAttribute('data-selected') === 'true'){\n                return button;\n            }\n        }\n\n        return buttons[0];\n    }\n\n    /**\n     * set selected button\n     * @param {BaseSortControl} baseSortControl\n     */\n    setSelectedButton(baseSortControl){\n\n        for(let control of this.controls){\n\n            if(!control.dropdown) continue;\n\n            //verify that dropdown has such button\n            const dropdownBtn = baseSortControl.buttons.find(btn => this.selected.isEqualTo(btn));\n\n            if(dropdownBtn){\n\n                //update dropdown panels value\n                control.dropdown.setPanelsContent(dropdownBtn.element.textContent);\n            }\n        }\n    }\n}\n\nexport default DropdownSortControl;","import BasePaginationControlsGroup from '../base/groups/pagination/base-pagination-controls-group';\nimport BaseDropdownControl from '../base/controls/dropdown/base-dropdown.control';\n\n/**\n * pagination control\n */\nclass PaginationControl extends BasePaginationControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.currentPage = 0;\n        this.itemsPerPage = 0;\n        this.range = 0;\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePaginationControl} control\n     */\n    addControl(control){\n\n        const basePaginationControl = super.addControl(control);\n\n        //update properties - we take them from the latest pagination control in the group\n        this.currentPage = basePaginationControl.currentPage;\n        this.itemsPerPage = Number(basePaginationControl.itemsPerPage) || 0;\n        this.range = basePaginationControl.range;\n\n        //restore control state from the deep link value if needed\n        this.restoreFromDeepLink(basePaginationControl);\n\n        //this template is used for generating pagination buttons\n        basePaginationControl.pageButtonsHolder = basePaginationControl.element.querySelector('[data-type=\"pages\"]');\n\n        if(basePaginationControl.pageButtonsHolder){\n            basePaginationControl.btnTemplate = basePaginationControl.pageButtonsHolder.innerHTML;\n        }\n\n        //first, last, next and prev button\n        basePaginationControl.firstButtons = basePaginationControl.element.querySelectorAll('[data-type=\"first\"]');\n        basePaginationControl.lastButtons = basePaginationControl.element.querySelectorAll('[data-type=\"last\"]');\n        basePaginationControl.prevButtons = basePaginationControl.element.querySelectorAll('[data-type=\"prev\"]');\n        basePaginationControl.nextButtons = basePaginationControl.element.querySelectorAll('[data-type=\"next\"]');\n\n        //event handlers\n        PaginationControl.bindEventHandler(basePaginationControl.firstButtons, 'click', this.pageButtonClick.bind(this), basePaginationControl);\n        PaginationControl.bindEventHandler(basePaginationControl.lastButtons, 'click', this.pageButtonClick.bind(this), basePaginationControl);\n        PaginationControl.bindEventHandler(basePaginationControl.prevButtons, 'click', this.pageButtonClick.bind(this), basePaginationControl);\n        PaginationControl.bindEventHandler(basePaginationControl.nextButtons, 'click', this.pageButtonClick.bind(this), basePaginationControl);\n\n        //items per page select\n        basePaginationControl.itemsPerPageSelects = Array.from(basePaginationControl.element.querySelectorAll('[data-type=\"items-per-page\"]'));\n        this.updateItemsPerPageSelect(basePaginationControl.itemsPerPageSelects);\n\n        //items per page custom drop downs\n        basePaginationControl.itemsPerPageDD = Array.from(basePaginationControl.element.querySelectorAll('[data-type=\"items-per-page-dd\"]'));\n        this.initCustomDropdowns(basePaginationControl);\n\n        PaginationControl.bindEventHandler(basePaginationControl.itemsPerPageSelects, 'change', this.selectChange.bind(this), basePaginationControl);\n\n        //information labels\n        basePaginationControl.labels = basePaginationControl.element.querySelectorAll('[data-type=\"info\"]');\n\n        if(basePaginationControl.labels) {\n            for (let label of basePaginationControl.labels) {\n                label.template = label.innerHTML;\n            }\n        }\n    }\n\n    /**\n     * update items per page value of select group\n     * @param {Array.<HTMLElement>} selects\n     */\n    updateItemsPerPageSelect(selects){\n\n        for(let select of selects){\n\n            const option = Array.from(select.options).find(option => option.value === this.itemsPerPage.toString());\n\n            if(option) {\n                select.value = Number(this.itemsPerPage) || 0;\n            }\n            else{\n                select.value = 0;\n            }\n        }\n    }\n\n    /**\n     * init custom dropdowns\n     * @param {BasePaginationControl} basePaginationControl\n     */\n    initCustomDropdowns(basePaginationControl){\n\n        //@param {HTMLCollection} itemsPerPageDD\n        const itemsPerPageDD = basePaginationControl.itemsPerPageDD;\n\n        if(!itemsPerPageDD || itemsPerPageDD.length <=0) return;\n\n        for(let dd of itemsPerPageDD){\n\n            //create dropdown instance for each dd HTML structure;\n            //this instance adds dropdown classes, styles and behaviour\n            dd.dropdown = new BaseDropdownControl(dd);\n\n            //all dropdown buttons are keeps as buttons property\n            dd.buttons = Array.from(dd.querySelectorAll('[data-value]'));\n\n            for(let button of dd.buttons){\n\n                button.addEventListener('click', (e) => {\n\n                    e.preventDefault();\n\n                    this.itemsPerPage = Number(button.getAttribute('data-value')) || 0;\n\n                    //set selected button in all dropdowns for the current this.itemsPerPage value\n                    this.setSelectedButton();\n\n                    dd.dropdown.close();\n\n                    if(window.jplist) {\n\n                        window.jplist.refresh(this.group, basePaginationControl);\n                    }\n                });\n            }\n        }\n\n        //set selected button in all dropdowns for the current this.itemsPerPage value\n        this.setSelectedButton();\n    }\n\n    // --------------------- BUTTONS ---------------------\n\n    /**\n     * set selected button in all dropdowns for the current this.itemsPerPage value\n     */\n    setSelectedButton(){\n\n        for(let control of this.controls){\n\n            if(!control.itemsPerPageDD) continue;\n\n            for(let dd of control.itemsPerPageDD){\n\n                if(!dd.buttons) continue;\n\n                let selectedButton = dd.buttons.find(button => {\n\n                    const btnValue = Number(button.getAttribute('data-value')) || 0;\n                    return btnValue === this.itemsPerPage;\n                });\n\n                if(!selectedButton){\n\n                    selectedButton = dd.buttons.find(button => {\n                        const btnValue = Number(button.getAttribute('data-value')) || 0;\n                        return btnValue === 0;\n                    });\n                }\n\n                if(selectedButton){\n\n                    dd.dropdown.setPanelsContent(selectedButton.textContent);\n                }\n            }\n        }\n    }\n\n    // --------------------- OPTIONS ---------------------\n\n    /**\n     * there can be only 1 pagination options object;\n     * in case of multiple -> get the latest\n     * @return {object} pagination options\n     */\n    getPaginationOptions(){\n\n        return {\n            itemsPerPage: this.itemsPerPage,\n            currentPage: this.currentPage,\n            range: this.range\n        };\n    }\n\n    /**\n     * update controls according to the pagination options calculated using PaginationAction class;\n     * @param {PaginationAction} paginationOptions\n     */\n    setPaginationOptions(paginationOptions){\n\n        if(!paginationOptions) return;\n\n        //update properties\n        this.currentPage = paginationOptions.currentPage;\n        this.itemsPerPage = paginationOptions.itemsPerPage;\n\n        for(let control of this.controls){\n\n            if(!control.btnTemplate || !control.pageButtonsHolder) continue;\n\n            //remove all old buttons\n            while (control.pageButtonsHolder.firstChild) {\n                control.pageButtonsHolder.removeChild(control.pageButtonsHolder.firstChild);\n            }\n\n            //generate new buttons\n            for (let i = paginationOptions.rangeStart; i <= paginationOptions.rangeEnd; i++) {\n\n                //update button text macros and button attributes\n                const div = document.createElement('div');\n                div.innerHTML = control.btnTemplate.replace(new RegExp('{pageNumber}', 'g'), (i+1)).trim();\n                const pageButton = div.firstChild;\n\n                let btn = pageButton.querySelector('[data-type=\"page\"]');\n                if(!btn){\n                    btn = pageButton;\n                }\n\n                btn.setAttribute('data-page', i.toString());\n\n                if(i === this.currentPage){\n\n                    btn.classList.add(control.selectedClass);\n                    btn.setAttribute('data-selected', 'true');\n                }\n\n                //on page button click event handler\n                btn.addEventListener('click', (e) => { this.pageButtonClick(e, btn, control); });\n\n                //add button to the buttons holder\n                control.pageButtonsHolder.appendChild(pageButton);\n            }\n\n            //update data-page attribute of first, last, prev and next buttons\n            PaginationControl.setPageAttr(control.firstButtons, 0, this.currentPage !== 0, control.disabledClass);\n\n            PaginationControl.setPageAttr(control.lastButtons,\n                paginationOptions.pagesNumber - 1,\n                this.currentPage !== paginationOptions.pagesNumber - 1,\n                control.disabledClass);\n\n            PaginationControl.setPageAttr(control.prevButtons,\n                paginationOptions.prevPage,\n                this.currentPage !== 0,\n                control.disabledClass);\n\n            PaginationControl.setPageAttr(control.nextButtons,\n                paginationOptions.nextPage,\n                this.currentPage !== paginationOptions.pagesNumber - 1,\n                control.disabledClass);\n\n            const infos = [\n                {key: '{pageNumber}', value: paginationOptions.currentPage + 1},\n                {key: '{pagesNumber}', value: paginationOptions.pagesNumber},\n                {key: '{startItem}', value: paginationOptions.start + 1},\n                {key: '{endItem}', value: paginationOptions.end},\n                {key: '{itemsNumber}', value: paginationOptions.itemsNumber}\n            ];\n\n            //update information labels\n            if(control.labels) {\n                for (let label of control.labels) {\n\n                    if(!label.template) continue;\n\n                    let html = label.template;\n\n                    for(let info of infos){\n                        html = html.replace(new RegExp(info.key, 'g'), info.value);\n                    }\n\n                    label.innerHTML = html;\n                }\n            }\n\n            //update whole control classes\n            const classesToRemove = (Array.from(control.element.classList)).filter(className => className.startsWith('jplist-pages-number-') || className.startsWith('jplist-items-number-'));\n\n            for(let className of classesToRemove){\n                control.element.classList.remove(className);\n            }\n\n            control.element.classList.add('jplist-pages-number-' + paginationOptions.pagesNumber);\n            control.element.classList.add('jplist-items-number-' + paginationOptions.itemsNumber);\n        }\n    }\n\n    // --------------------- EVENT HANDLERS ---------------------\n\n    /**\n     * page, first, last, prev and next button onclick handler\n     * @param {HTMLElement} btn\n     * @param {BasePaginationControl} control\n     */\n    pageButtonClick(e, btn, control){\n\n        if(e) {\n            e.preventDefault();\n        }\n\n        const pageNumber = btn ? btn.getAttribute('data-page') : e.target.getAttribute('data-page');\n        this.currentPage = Number(pageNumber) || 0;\n\n        if(window.jplist) {\n\n            window.jplist.refresh(this.group, control);\n        }\n    }\n\n    /**\n     * on items per page select change\n     * @param {object} e\n     * @param {HTMLElement} select\n     * @param {BasePaginationControl} basePaginationControl\n     */\n    selectChange(e, select, basePaginationControl){\n\n        e.preventDefault();\n\n        const itemsPerPage = Number(e.target.value);\n\n        if(!isNaN(itemsPerPage)){\n\n            this.itemsPerPage = itemsPerPage;\n\n            //update the selected values of all controls\n            for(let control of this.controls){\n                this.updateItemsPerPageSelect(control.itemsPerPageSelects);\n            }\n        }\n\n        if(window.jplist) {\n\n            window.jplist.refresh(this.group, basePaginationControl);\n        }\n    }\n\n    // --------------------- DEEP LINK ---------------------\n\n    /**\n     * restore control state from the deep link value\n     * @param {BasePaginationControl} basePaginationControl\n     */\n    restoreFromDeepLink(basePaginationControl){\n\n        if(basePaginationControl.id){\n\n            this.id = basePaginationControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === basePaginationControl.id);\n\n            if(deepLinkParam){\n\n                const parts = deepLinkParam.value.split('-');\n\n                if(parts.length !== 2) return;\n\n                const currentPage = Number(parts[0]);\n                const itemsPerPage = Number(parts[1]);\n\n                if(isNaN(currentPage) || isNaN(itemsPerPage)) return;\n\n                this.currentPage = currentPage;\n                this.itemsPerPage = itemsPerPage;\n            }\n        }\n    }\n\n    /**\n     * by default control's deep link is empty\n     * @returns {string}\n     */\n    getDeepLink(){\n\n        if(this.id){\n            return this.id + '=' + this.currentPage + '-' + this.itemsPerPage;\n        }\n\n        return '';\n    }\n\n    // --------------------- HELPERS ---------------------\n\n    /**\n     * update page button attributes and styles of the elements collection\n     * @param {HTMLCollection} items\n     * @param {number} page\n     * @param {boolean} isEnabled\n     * @param {string} disabledClass\n     */\n    static setPageAttr(items, page, isEnabled, disabledClass){\n\n        if(!items) return;\n\n        for(let item of items){\n            item.setAttribute('data-page', page);\n\n            if(isEnabled){\n                item.classList.remove(disabledClass);\n            }\n            else{\n                item.classList.add(disabledClass);\n            }\n        }\n    }\n\n    /**\n     * bind event handler to the items collection\n     * @param {HTMLCollection} items\n     * @param {string} eventName\n     * @param {Function} func\n     * @param {BasePaginationControl} basePaginationControl\n     */\n    static bindEventHandler(items, eventName, func, basePaginationControl){\n\n        if(!items) return;\n\n        for(let item of items){\n            item.addEventListener(eventName, (e) => {func(e, item, basePaginationControl); });\n        }\n    }\n}\n\nexport default PaginationControl;","import BaseControlsGroup from '../base-controls-group';\nimport BasePaginationControl from '../../controls/pagination/base-pagination.control';\n\n/**\n * represents a group of pagination controls with the same data-name and data-group attributes\n */\nclass BasePaginationControlsGroup extends BaseControlsGroup{\n\n    /**\n     * there can be only 1 pagination options object;\n     * in case of multiple -> get the latest\n     * @return {object|null} pagination options\n     */\n    getPaginationOptions(){\n\n        if(this.controls.length > 0){\n            return this.controls[this.controls.length - 1].getPaginationOptions();\n        }\n\n        return null;\n    }\n\n    /**\n     * update controls according to the pagination options calculated using PaginationAction class;\n     * @param {PaginationAction} paginationOptions\n     */\n    setPaginationOptions(paginationOptions){}\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BasePaginationControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const basePaginationControl = new BasePaginationControl(control.element);\n\n        this.controls.push(basePaginationControl);\n\n        return basePaginationControl;\n    }\n}\n\nexport default BasePaginationControlsGroup;\n","import BaseControl from '../base.control';\n\n/**\n * base pagination control\n */\nclass BasePaginationControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * optional, 10 by default\n             * the max number of items per page\n             */\n            this.itemsPerPage = Number(element.getAttribute('data-items-per-page')) || 10;\n\n            /**\n             * optional, 0 by default\n             * the initial page\n             */\n            this.currentPage = Number(element.getAttribute('data-current-page')) || 0;\n\n            /**\n             * optional, 10 by default\n             * max number of visible pagination button\n             */\n            this.range = Number(element.getAttribute('data-range')) || 10;\n\n            /**\n             * CSS class that is used on disabled pagination buttons\n             * @type {string|string}\n             */\n            this.disabledClass = (element.getAttribute('data-disabled-class') || 'jplist-disabled').trim();\n\n            /**\n             * CSS class that is used on selected pagination buttons\n             * @type {string|string}\n             */\n            this.selectedClass = (element.getAttribute('data-selected-class') || 'jplist-selected').trim();\n        }\n    }\n\n    /**\n     * get pagination options\n     * @return {object} options\n     */\n    getPaginationOptions(){\n\n        return {\n            itemsPerPage: this.itemsPerPage,\n            currentPage: this.currentPage,\n            range: this.range\n        };\n    }\n}\n\nexport default BasePaginationControl;\n","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\n\n/**\n * text box filter control\n */\nclass TextboxFilterControl extends BaseTextFilterControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseTextFilterControl} control\n     */\n    addControl(control){\n\n        const baseTextFilterControl = super.addControl(control);\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseTextFilterControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseTextFilterControl.id);\n\n            if(deepLinkParam){\n                baseTextFilterControl.text = deepLinkParam.value;\n                baseTextFilterControl.element.value = deepLinkParam.value;\n            }\n        }\n\n        /**\n         * on control event\n         */\n        baseTextFilterControl.element.addEventListener('keyup', e => {\n\n            e.preventDefault();\n\n            baseTextFilterControl.text = e.target.value;\n\n            this.textChanged(baseTextFilterControl);\n        });\n\n        //handle clear button\n        baseTextFilterControl.clearButtonID = (baseTextFilterControl.element.getAttribute('data-clear-btn-id') || '').trim();\n\n        if(baseTextFilterControl.clearButtonID){\n\n            const clearBtn = document.getElementById(baseTextFilterControl.clearButtonID);\n\n            if(clearBtn){\n\n                /**\n                 * on clear button click\n                 */\n                clearBtn.addEventListener('click', e => {\n\n                    e.preventDefault();\n\n                    baseTextFilterControl.text = '';\n\n                    this.textChanged(baseTextFilterControl);\n                });\n            }\n        }\n    }\n\n    /**\n     * on text change\n     */\n    textChanged(baseTextFilterControl){\n\n        this.controls.forEach(control => {\n\n            if(control.isEqualTo(baseTextFilterControl, false)){\n\n                control.element.value = baseTextFilterControl.initialText;\n                control.text = baseTextFilterControl.initialText;\n            }\n        });\n\n        if(window.jplist) {\n\n            window.jplist.refresh(this.group, baseTextFilterControl);\n        }\n    }\n\n}\n\nexport default TextboxFilterControl;","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\nimport CheckboxMixin from '../../../base/groups/mixins/checkbox.mixin';\n\n/**\n * checkbox text filter control\n */\nclass CheckboxTextFilterControl extends CheckboxMixin(BaseTextFilterControlsGroup){\n\n    /**\n     * get text filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getTextFilterOptions(){\n\n        let options = [];\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getTextFilterOptions());\n            }\n        }\n\n        return options;\n    }\n}\n\nexport default CheckboxTextFilterControl;","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\nimport RadioButtonsMixin from '../../../base/groups/mixins/radio-buttons.mixin';\n\n/**\n * radio buttons text filter control\n */\nclass RadioButtonsTextFilterControl extends RadioButtonsMixin(BaseTextFilterControlsGroup){\n\n    /**\n     * get text filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getTextFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getTextFilterOptions());\n        }\n\n        return options;\n    }\n}\n\nexport default RadioButtonsTextFilterControl;","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\nimport ButtonsMixin from '../../../base/groups/mixins/buttons.mixin';\n\n/**\n * buttons text filter control\n */\nclass ButtonsTextFilterControl extends ButtonsMixin(BaseTextFilterControlsGroup){\n\n    /**\n     * get text filter options from all controls in the group\n     * @return {Array.<object>} text filter options\n     */\n    getTextFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getTextFilterOptions());\n        }\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getTextFilterOptions());\n            }\n        }\n\n        return options;\n    }\n\n}\n\nexport default ButtonsTextFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport BasePathFilterControl from '../../../base/controls/filter/base-path-filter.control';\n\n/**\n * select filter control\n */\nclass SelectFilterControl extends BasePathFilterControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.options = [];\n        this.selected = '';\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        const selectFilterControl = super.addControl(control);\n\n        let options = selectFilterControl.element.querySelectorAll('option');\n\n        for(let option of options){\n\n            option.setAttribute('data-name', this.name);\n            option.setAttribute('data-group', this.group);\n\n            if(!this.options.find(opt => opt.element.value === option.value)){\n                this.options.push(new BasePathFilterControl(option));\n            }\n        }\n\n        this.selected = selectFilterControl.element.value;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(selectFilterControl.id){\n\n            this.id = selectFilterControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === selectFilterControl.id);\n\n            if(deepLinkParam){\n                selectFilterControl.element.value = deepLinkParam.value;\n                this.selected = deepLinkParam.value;\n            }\n        }\n\n        /**\n         * on control event\n         */\n        selectFilterControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            this.selected = e.target.value;\n\n            for(let select of this.controls){\n                select.element.value = this.selected;\n            }\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, selectFilterControl);\n            }\n        });\n    }\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getPathFilterOptions(){\n\n        let selected = this.options.find(opt => opt.element.value === this.selected);\n\n        if(selected){\n            return [selected.getPathFilterOptions()];\n        }\n\n        return [];\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        let selected = this.options.find(opt => opt.element.value === this.selected);\n\n        if(this.id){\n            return this.id + '=' + selected.element.value;\n        }\n\n        return '';\n    }\n\n}\n\nexport default SelectFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport CheckboxMixin from '../../../base/groups/mixins/checkbox.mixin';\n\n/**\n * checkbox path filter control\n */\nclass CheckboxPathFilterControl extends CheckboxMixin(BasePathFilterControlsGroup){\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getPathFilterOptions(){\n\n        let options = [];\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getPathFilterOptions());\n            }\n        }\n\n        return options;\n    }\n}\n\nexport default CheckboxPathFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport RadioButtonsMixin from '../../../base/groups/mixins/radio-buttons.mixin';\n\n/**\n * radio buttons path filter control\n */\nclass RadioButtonsPathFilterControl extends RadioButtonsMixin(BasePathFilterControlsGroup){\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getPathFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getPathFilterOptions());\n        }\n\n        return options;\n    }\n}\n\nexport default RadioButtonsPathFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport ButtonsMixin from '../../../base/groups/mixins/buttons.mixin';\n\n/**\n * buttons path filter control\n */\nclass ButtonsPathFilterControl extends ButtonsMixin(BasePathFilterControlsGroup){\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getPathFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getPathFilterOptions());\n        }\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getPathFilterOptions());\n            }\n        }\n\n        return options;\n    }\n}\n\nexport default ButtonsPathFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport BasePathFilterControl from '../../../base/controls/filter/base-path-filter.control';\nimport BaseDropdownControl from '../../../base/controls/dropdown/base-dropdown.control';\n\n/**\n * dropdown filter control\n */\nclass DropdownFilterControl extends BasePathFilterControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n        this.selected = '';\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        //a dropdown has the following custom properties:\n        //  -- dropdown - custom dropdown behaviour, styles, classes\n        //  -- buttons - the list of dropdown buttons, each of them is BaseSortControl\n        const basePathFilterControl = super.addControl(control);\n\n        //generate dropdown instance for the given control;\n        //this instance adds dropdown classes, styles and behaviour\n        basePathFilterControl.dropdown = new BaseDropdownControl(control.element);\n        basePathFilterControl.buttons = [];\n\n        //each button inside dropdown is a separate path filter control that defined by data-path attribute;\n        //they are stored in basePathFilterControl.buttons array\n        let buttons = basePathFilterControl.element.querySelectorAll('[data-path]');\n\n        for(let button of buttons){\n\n            button.setAttribute('data-name', this.name);\n            button.setAttribute('data-group', this.group);\n            button.setAttribute('data-jump', basePathFilterControl.jump);\n\n            let btnPathFilterControl = new BasePathFilterControl(button);\n\n            //save newly created button in the basePathFilterControl.buttons array\n            basePathFilterControl.buttons.push(btnPathFilterControl);\n\n            /**\n             * on control button click -> update the selected control\n             */\n            btnPathFilterControl.element.addEventListener('click', e => {\n\n                e.preventDefault();\n\n                //clicked button should be the selected one\n                this.selected = btnPathFilterControl;\n\n                this.setSelectedButton(basePathFilterControl);\n\n                if(window.jplist) {\n\n                    window.jplist.refresh(this.group, btnPathFilterControl);\n                }\n            });\n        }\n\n        this.selected = DropdownFilterControl.getSelectedButton(basePathFilterControl.buttons);\n        this.setSelectedButton(basePathFilterControl);\n\n        //check if control contains a link and it is in the deep links parameters\n        if(basePathFilterControl.id){\n\n            this.id = basePathFilterControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === basePathFilterControl.id);\n\n            if(deepLinkParam){\n\n                const deepLinkBtn = basePathFilterControl.buttons.find(btn => {\n\n                    const btnValue = btn.element.getAttribute('data-value');\n                    return (deepLinkParam.value === btnValue) ? btn : null;\n                });\n\n                if(deepLinkBtn) {\n                    this.selected = deepLinkBtn;\n                    this.setSelectedButton(basePathFilterControl);\n                }\n            }\n        }\n    }\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} pathFilterOptions\n     */\n    getPathFilterOptions(){\n\n        if(this.selected){\n            return [this.selected.getPathFilterOptions()];\n        }\n\n        return [];\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        if(this.id && this.selected){\n            return this.id + '=' + this.selected.element.getAttribute('data-value') || '';\n        }\n\n        return '';\n    }\n\n    /**\n     * get selected button that has data-selected=\"true\" data attribute;\n     * if there is no data-selected attribute -> take the first button\n     * @param {Array.<BasePathFilterControl>} buttons\n     * @return {BasePathFilterControl|null}\n     */\n    static getSelectedButton(buttons){\n\n        if(buttons.length <= 0) return null;\n\n        for(let button of buttons){\n            if(button.element.getAttribute('data-selected') === 'true'){\n                return button;\n            }\n        }\n\n        return buttons[0];\n    }\n\n    /**\n     * set selected button\n     * @param {BasePathFilterControl} basePathFilterControl\n     */\n    setSelectedButton(basePathFilterControl){\n\n        for(let control of this.controls){\n\n            if(!control.dropdown) continue;\n\n            //verify that dropdown has such button\n            const dropdownBtn = basePathFilterControl.buttons.find(btn => this.selected.isEqualTo(btn));\n\n            if(dropdownBtn){\n\n                //update dropdown panels value\n                control.dropdown.setPanelsContent(dropdownBtn.element.textContent);\n            }\n\n            control.dropdown.close();\n        }\n    }\n\n}\n\nexport default DropdownFilterControl;","import BaseRangeFilterControlsGroup from '../../../base/groups/filter/base-range-filter-controls-group';\nimport ButtonsMixin from '../../../base/groups/mixins/buttons.mixin';\n\n/**\n * buttons range filter\n */\nclass ButtonsRangeFilter extends ButtonsMixin(BaseRangeFilterControlsGroup){\n\n    /**\n     * get range filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getRangeFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getRangeFilterOptions());\n        }\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getRangeFilterOptions());\n            }\n        }\n\n        return options;\n    }\n}\n\nexport default ButtonsRangeFilter;","import BaseRangeFilterControlsGroup from '../../../base/groups/filter/base-range-filter-controls-group';\nimport BaseSliderControl from '../../../base/controls/slider/base-slider.control';\n\n/**\n * range slider filter\n */\nclass SliderRangeFilter extends BaseRangeFilterControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     */\n    addControl(control){\n\n        const rangeSliderFilterControl = super.addControl(control);\n\n        const sliderEl = control.element.querySelector('[data-type=\"slider\"]');\n        rangeSliderFilterControl.val1Elements = control.element.querySelectorAll('[data-type=\"value-1\"]');\n        rangeSliderFilterControl.val2Elements = control.element.querySelectorAll('[data-type=\"value-2\"]');\n        rangeSliderFilterControl.minElements = control.element.querySelectorAll('[data-type=\"min\"]');\n        rangeSliderFilterControl.maxElements = control.element.querySelectorAll('[data-type=\"max\"]');\n\n        if(!sliderEl) return;\n\n        //control properties\n        const orientation = control.element.getAttribute('data-orientation') || 'horizontal'; //'vertical'\n\n        for(let el of rangeSliderFilterControl.minElements){\n            el.textContent = rangeSliderFilterControl.min;\n        }\n\n        for(let el of rangeSliderFilterControl.maxElements){\n            el.textContent = rangeSliderFilterControl.max;\n        }\n\n        //check if control contains a link and it is in the deep links parameters\n        if(rangeSliderFilterControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === rangeSliderFilterControl.id);\n\n            if(deepLinkParam && deepLinkParam.value){\n                const parts = deepLinkParam.value.split('_');\n\n                if(parts.length === 2){\n\n                    rangeSliderFilterControl.from = Number(parts[0]) || 0;\n                    rangeSliderFilterControl.to = Number(parts[1]) || 0;\n                }\n            }\n        }\n\n        rangeSliderFilterControl.slider = new BaseSliderControl(\n            sliderEl,\n            orientation === 'vertical',\n            rangeSliderFilterControl.min,\n            rangeSliderFilterControl.from,\n            rangeSliderFilterControl.to,\n            rangeSliderFilterControl.max,\n            (value1, value2) => {\n\n                for(let el of rangeSliderFilterControl.val1Elements){\n                    el.textContent = Math.round(value1);\n                }\n\n                for(let el of rangeSliderFilterControl.val2Elements){\n                    el.textContent = Math.round(value2);\n                }\n\n                for(let control of this.controls){\n\n                    if(!control.slider) continue;\n\n                    control.slider.setValues(value1, value2, false);\n                }\n\n                if(window.jplist) {\n\n                    window.jplist.refresh(this.group, rangeSliderFilterControl);\n                }\n        });\n    }\n\n    /**\n     * get range filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getRangeFilterOptions(){\n\n        let options = [];\n\n        for(let control of this.controls){\n\n            if(!control.slider || !control.slider.handler1 || !control.slider.handler2) continue;\n\n            const controlOptions = control.getRangeFilterOptions();\n            controlOptions.from = control.slider.handler1.value;\n            controlOptions.to = control.slider.handler2.value;\n\n            options = options.concat(controlOptions);\n        }\n\n        return options;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        const arr = this.controls.map(control => {\n\n            if(!control.id || !control.slider || !control.slider.handler1 || !control.slider.handler2) return '';\n\n            return control.id + '=' + control.slider.handler1.value + '_' + control.slider.handler2.value;\n        }).filter(str => str !== '');\n\n        const unique = Array.from(new Set(arr));\n\n        return unique.join('&');\n\n    }\n}\n\nexport default SliderRangeFilter;","import './base-slider.control.css';\n\n/**\n * base slider control\n */\nclass BaseSliderControl{\n\n    /**\n     * control type defined in data-jplist-control attribute;\n     * for example, data-jplist-control=\"hidden-sort\" has type='hidden-sort'\n     * @param {HTMLElement} element\n     * @param {boolean} isVertical\n     * @param {number} min\n     * @param {number} value1 - initial value 1\n     * @param {number} value2 - initial value2\n     * @param {number} max\n     * @param {Function} callback\n     */\n    constructor(element, isVertical = false, min = 0, value1 = 0, value2 = 0, max = 0, callback = (value1, value2) => {}){\n\n        if(element) {\n\n            this.element = element;\n            this.element.classList.add('jplist-slider');\n\n            if(!this.element) return;\n\n            this.isVertical = isVertical;\n            this.callback = callback;\n            this.min = min;\n            this.max = max;\n\n            if(isVertical){\n                this.element.classList.add('jplist-slider-vertical');\n            }\n\n            //create and append the first holder\n            this.handler1 = document.createElement('span');\n            this.handler1.classList.add('jplist-slider-holder-1');\n            this.element.appendChild(this.handler1);\n\n            //create and append the range element\n            this.range = document.createElement('span');\n            this.range.classList.add('jplist-slider-range');\n            this.element.appendChild(this.range);\n\n            //initial value\n            this.handler1.left = 0;\n            this.handler1.top = 0;\n            //this.handler1.value = this.getPreviewValue(0, min, max); //0\n\n            //create and append the second holder\n            this.handler2 = document.createElement('span');\n            this.handler2.classList.add('jplist-slider-holder-2');\n            this.element.appendChild(this.handler2);\n\n            //initial value\n            this.handler2.left = 0;\n            this.handler2.top = 0;\n            //this.handler2.value = this.getPreviewValue(0, min, max); //0\n\n            this.dragging = null;\n\n            this.handler1.addEventListener('mousedown', this.start.bind(this));\n            this.handler2.addEventListener('mousedown', this.start.bind(this));\n            this.handler1.addEventListener('touchstart', this.start.bind(this));\n            this.handler2.addEventListener('touchstart', this.start.bind(this));\n\n            document.addEventListener('mousemove', this.render.bind(this));\n            document.addEventListener('touchmove', this.render.bind(this));\n            window.addEventListener('resize', this.resize.bind(this));\n\n            document.addEventListener('mouseup', this.stop.bind(this));\n            document.addEventListener('touchend', this.stop.bind(this));\n            document.body.addEventListener('mouseleave', this.stop.bind(this));\n\n            this.element.addEventListener('mousedown', this.jump.bind(this));\n\n            //set initial values\n            this.setValues(value1, value2);\n        }\n    }\n\n    /**\n     * set slider values from outside\n     * @param {number} value1\n     * @param {number} value2\n     * @param {boolean} sendCallback\n     */\n    setValues(value1, value2, sendCallback = true){\n\n        if(value2 < value1){\n            value2 = value1;\n        }\n\n        const pos1 = this.getInnerValue(value1, this.min, this.max);\n        const pos2 = this.getInnerValue(value2, this.min, this.max);\n\n        this.update({\n            x: pos2,\n            y: pos2\n        }, this.handler2, sendCallback);\n\n        this.update({\n            x: pos1,\n            y: pos1\n        }, this.handler1, sendCallback);\n    }\n\n    /**\n     * convert [0, slider-width] range to [min, max] range for the specified value\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} mappedValue\n     */\n    getPreviewValue(value, min, max){\n\n        const rect = this.element.getBoundingClientRect();\n        const size = this.isVertical? 'height': 'width';\n\n        const newStart = min;\n        const newEnd = max;\n        const originalStart = 0;\n        const originalEnd = rect[size];\n\n        //return Math.round((newEnd - newStart) * ((value - originalStart) / (originalEnd - originalStart)) + newStart);\n        return (newEnd - newStart) * ((value - originalStart) / (originalEnd - originalStart)) + newStart;\n    }\n\n    /**\n     * convert [min, max] range to [0, slider-width] range for the specified value\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} mappedValue\n     */\n    getInnerValue(value, min, max){\n\n        const rect = this.element.getBoundingClientRect();\n        const size = this.isVertical? 'height': 'width';\n\n        const newStart = 0;\n        const newEnd = rect[size];\n        const originalStart = min;\n        const originalEnd = max;\n\n        //return Math.round((newEnd - newStart) * ((value - originalStart) / (originalEnd - originalStart)) + newStart);\n        return (newEnd - newStart) * ((value - originalStart) / (originalEnd - originalStart)) + newStart;\n    }\n\n    /**\n     * jump to the specified point on the slider\n     * @param {Object} e\n     */\n    jump(e){\n        e.preventDefault();\n\n        let position = this.getHandlerPos(e);\n\n        if(this.isVertical){\n            this.dragging = Math.abs(position.y - this.handler1.top) < Math.abs(position.y - this.handler2.top) ? this.handler1 : this.handler2;\n        }\n        else{\n            this.dragging = Math.abs(position.x - this.handler1.left) < Math.abs(position.x - this.handler2.left) ? this.handler1 : this.handler2;\n        }\n\n        //render the updated state\n        this.render(e);\n    }\n\n    /**\n     * update z-index of the active handler\n     */\n    setZIndex(){\n\n        const handler1ZIndex = window.getComputedStyle ? Number(document.defaultView.getComputedStyle(this.handler1, null).getPropertyValue('z-index')) || 200 : 200;\n        const handler2ZIndex = window.getComputedStyle ? Number(document.defaultView.getComputedStyle(this.handler2, null).getPropertyValue('z-index')) || 200 : 200;\n\n        if(handler1ZIndex === handler2ZIndex){\n            this.dragging.style['z-index'] = handler1ZIndex + 1;\n        }\n        else{\n            const max = Math.max(handler1ZIndex, handler2ZIndex);\n            const min = Math.min(handler1ZIndex, handler2ZIndex);\n\n            this.handler1.style['z-index'] = min;\n            this.handler2.style['z-index'] = min;\n            this.dragging.style['z-index'] = max;\n        }\n    }\n\n    /**\n     * start dragging\n     * @param {Object} e\n     */\n    start(e){\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.dragging = e.target;\n\n        //update z-index of the active handler\n        this.setZIndex();\n\n        //render the updated state\n        this.render();\n    }\n\n    /**\n     * stop dragging\n     * @param {Object} e\n     */\n    stop(e){\n        //e.preventDefault();\n\n        this.dragging = null;\n    }\n\n    /**\n     * on window resize\n     * @param {Object} e\n     */\n    resize(e){\n\n        if(this.handler1 && this.handler2){\n\n            this.setValues(this.handler1.value, this.handler2.value);\n        }\n    }\n\n    /**\n     * render the updated state\n     */\n    render(e){\n        if(e && this.dragging){\n\n            this.update(this.getHandlerPos(e), this.dragging);\n        }\n    }\n\n    /**\n     * update position and styles\n     * @param {object} position\n     * @param {element} handler\n     * @param {boolean} sendCallback\n     */\n    update(position, handler, sendCallback = true){\n\n        if(handler){\n\n            const rect = this.element.getBoundingClientRect();\n\n            const size = this.isVertical? 'height': 'width';\n            const xy = this.isVertical? 'y': 'x';\n            const lefttop = this.isVertical? 'top': 'left';\n\n            if(position[xy] < 0){\n                position[xy] = 0;\n            }\n\n            if(position[xy] > rect[size]){\n                position[xy] = rect[size];\n            }\n\n            if(handler === this.handler1 && position[xy] >= this.handler2[lefttop]){\n                position[xy] = this.handler2[lefttop];\n            }\n\n            if(handler === this.handler2 && position[xy] <= this.handler1[lefttop]){\n                position[xy] = this.handler1[lefttop];\n            }\n\n            //save current value\n            handler[lefttop] = position[xy];\n            //const value = Math.round(position[xy] * 100 / rect[size]); //value in %\n            handler.value = this.getPreviewValue(position[xy], this.min, this.max);\n\n            handler.style[lefttop] = (position[xy]) + 'px';\n\n            //update range element\n            this.range.style[lefttop] = this.handler1[lefttop] + 'px';\n\n            const rangeHeight = this.handler2[lefttop] - this.handler1[lefttop];\n            this.range.style[size] = (rangeHeight >= 0 ? rangeHeight : 0) + 'px';\n\n            //call callback function\n            if(this.callback && sendCallback){\n\n                this.callback(this.handler1.value, this.handler2.value);\n            }\n        }\n    }\n\n    /**\n     * subtraction of 2 vectors\n     * @param {Object} v1 - vector #1\n     * @param {Object} v2 - vector #2\n     */\n    static sub(v1, v2){\n\n        return {\n            x: v1.x - v2.x,\n            y: v1.y - v2.y\n        };\n    }\n\n    /**\n     * get handler position from mouse / tap position\n     * @param {object} e\n     * @return {object} handler position\n     */\n    getHandlerPos(e){\n\n        const rect = this.element.getBoundingClientRect();\n\n        const point = {\n            x: e.touches && e.touches.length > 0 ? e.touches[0].pageX : e.clientX,\n            y: e.touches && e.touches.length > 0 ? e.touches[0].pageY : e.clientY\n        };\n\n        const vector = {\n            x: rect.left,\n            y: rect.top\n        };\n\n        return BaseSliderControl.sub(point, vector);\n    }\n\n}\n\nexport default BaseSliderControl;","import BaseDistanceFilterControlsGroup from '../../../base/groups/filter/base-distance-filter-controls-group';\nimport BaseDistanceFilterControl from '../../../base/controls/filter/base-distance-filter.control';\n\n/**\n * address distance filter control\n */\nclass AddressDistanceFilterControl extends BaseDistanceFilterControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n        \n        this.geocodeApiKey = '';\n        this.debounceTimeout = null;\n        this.debounceDelay = 500; // 500ms debounce delay\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseDistanceFilterControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        // Create a new BaseDistanceFilterControl\n        const baseDistanceFilterControl = new BaseDistanceFilterControl(control.element);\n\n        // Get API key from data-api-key attribute\n        this.geocodeApiKey = control.element.getAttribute('data-api-key') || '';\n\n        // Find the address input element\n        baseDistanceFilterControl.addressInput = control.element.querySelector('[data-type=\"address-input\"]');\n        \n        // Find the loading indicator\n        baseDistanceFilterControl.loadingIndicator = control.element.querySelector('.loading-indicator');\n\n        // Add event listener for address input changes\n        if(baseDistanceFilterControl.addressInput){\n            baseDistanceFilterControl.addressInput.addEventListener('input', this.onAddressInputChange.bind(this, baseDistanceFilterControl));\n        }\n\n        // Add the control to the group\n        this.controls.push(baseDistanceFilterControl);\n\n        return baseDistanceFilterControl;\n    }\n\n    /**\n     * handle address input change\n     * @param {BaseDistanceFilterControl} control\n     * @param {Event} e\n     */\n    onAddressInputChange(control, e){\n        const address = e.target.value.trim();\n        \n        // Clear any existing timeout\n        if(this.debounceTimeout) {\n            clearTimeout(this.debounceTimeout);\n        }\n        \n        if(address){\n            // Set a new timeout for debouncing\n            this.debounceTimeout = setTimeout(() => {\n                this.geocodeAddress(address, control);\n            }, this.debounceDelay);\n        }\n        else{\n            // Clear coordinates if address is empty\n            for(let ctrl of this.controls){\n                ctrl.userLat = null;\n                ctrl.userLng = null;\n                ctrl.userAddress = '';\n            }\n            \n            // Hide all distance display elements\n            this.hideDistanceDisplayElements();\n            \n            // Refresh the content\n            if(window.jplist){\n                window.jplist.refresh(this.group, control);\n            }\n        }\n    }\n\n    /**\n     * hide all distance display elements\n     */\n    hideDistanceDisplayElements(){\n        for(let control of this.controls){\n            const distanceDisplayPath = control.element.getAttribute('data-distance-display');\n            if(distanceDisplayPath){\n                const items = document.querySelectorAll(`[data-jplist-group=\"${this.group}\"] [data-jplist-item]`);\n                for(let item of items){\n                    const displayElements = item.querySelectorAll(distanceDisplayPath);\n                    for(let displayEl of displayElements){\n                        displayEl.textContent = '';\n                        displayEl.style.display = 'none';\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * geocode address to coordinates\n     * @param {string} address\n     * @param {BaseDistanceFilterControl} control\n     */\n    geocodeAddress(address, control){\n        if(!address || !this.geocodeApiKey) return;\n        \n        // Show loading indicator\n        if(control.loadingIndicator) {\n            control.loadingIndicator.style.display = 'block';\n        }\n        \n        const apiUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${this.geocodeApiKey}`;\n        \n        fetch(apiUrl)\n            .then(response => response.json())\n            .then(data => {\n                // Hide loading indicator\n                if(control.loadingIndicator) {\n                    control.loadingIndicator.style.display = 'none';\n                }\n                \n                if(data.status === 'OK' && data.results && data.results.length > 0) {\n                    const location = data.results[0].geometry.location;\n                    \n                    // Update all controls in the group with the new coordinates\n                    for(let ctrl of this.controls){\n                        ctrl.userLat = location.lat;\n                        ctrl.userLng = location.lng;\n                        ctrl.userAddress = address;\n                    }\n                    \n                    // Refresh the content\n                    if(window.jplist){\n                        window.jplist.refresh(this.group, control);\n                    }\n                } else {\n                    // Handle geocoding error silently\n                }\n            })\n            .catch(() => {\n                // Hide loading indicator\n                if(control.loadingIndicator) {\n                    control.loadingIndicator.style.display = 'none';\n                }\n                // Handle fetch error silently\n            });\n    }\n\n    /**\n     * restore control state from the deep link value\n     * @param {BaseDistanceFilterControl} control\n     */\n    restoreFromDeepLink(control) {\n        if(control.id) {\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === control.id);\n            \n            if(deepLinkParam) {\n                const address = decodeURIComponent(deepLinkParam.value);\n                \n                if(control.addressInput) {\n                    control.addressInput.value = address;\n                }\n                \n                this.geocodeAddress(address, control);\n            }\n        }\n    }\n\n    /**\n     * get distance filter options from all controls in the group\n     * @return {Array.<object>} distance filter options\n     */\n    getDistanceFilterOptions(){\n        let options = [];\n        \n        for(let control of this.controls){\n            // Only add options if we have valid coordinates\n            if(control.userLat && control.userLng){\n                const latPath = control.element.getAttribute('data-lat-path');\n                const lngPath = control.element.getAttribute('data-lng-path');\n                const latAttr = control.element.getAttribute('data-lat-attr');\n                const lngAttr = control.element.getAttribute('data-lng-attr');\n                const distanceDisplayPath = control.element.getAttribute('data-distance-display');\n                \n                if(latPath && lngPath && latAttr && lngAttr){\n                    options.push({\n                        latPath: latPath,\n                        lngPath: lngPath,\n                        latAttr: latAttr,\n                        lngAttr: lngAttr,\n                        userLat: control.userLat,\n                        userLng: control.userLng,\n                        distanceDisplayPath: distanceDisplayPath\n                    });\n                }\n            }\n        }\n        \n        return options;\n    }\n}\n\nexport default AddressDistanceFilterControl;\n","import BaseControlsGroup from '../base-controls-group';\nimport BaseDistanceFilterControl from '../../controls/filter/base-distance-filter.control';\n\n/**\n * represents a group of distance filter controls with the same data-name and data-group attributes\n */\nclass BaseDistanceFilterControlsGroup extends BaseControlsGroup{\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseDistanceFilterControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const baseDistanceFilterControl = new BaseDistanceFilterControl(control.element);\n\n        this.controls.push(baseDistanceFilterControl);\n\n        return baseDistanceFilterControl;\n    }\n\n    /**\n     * get distance filter options from all controls in the group\n     * @return {Array.<object>} distance filter options\n     */\n    getDistanceFilterOptions(){\n\n        let options = [];\n\n        for(let control of this.controls){\n            // Only add options if we have valid coordinates\n            if(control.userLat && control.userLng){\n                options.push({\n                    latPath: control.latPath,\n                    lngPath: control.lngPath,\n                    latAttr: control.latAttr,\n                    lngAttr: control.lngAttr,\n                    maxDistance: control.maxDistance,\n                    userLat: control.userLat,\n                    userLng: control.userLng,\n                    distanceDisplayPath: control.distanceDisplayPath,\n                    or: control.or\n                });\n            }\n        }\n\n        return options;\n    }\n}\n\nexport default BaseDistanceFilterControlsGroup;\n","import BaseControlsGroup from '../base/groups/base-controls-group';\n\n/**\n * no results control\n * Example:\n * <div data-jplist-control=\"no-results\" data-group=\"group1\" name=\"no-results\">No Results Found</div>\n */\nclass NoResultsControl extends BaseControlsGroup{\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseControl|null}\n     */\n    addControl(control){\n\n        super.addControl(control);\n\n        control.element.addEventListener('jplist.state', (e) => {\n\n            if(!e.jplistState) return;\n\n            const itemsNumber = Number(e.jplistState.itemsNumber) || 0;\n            control.element.style.display = itemsNumber === 0 ? '' : 'none';\n\n        }, false);\n\n    }\n}\n\nexport default NoResultsControl;","import BaseControlsGroup from '../base/groups/base-controls-group';\n\nconst SELECTED_CLASS = 'jplist-selected';\n\n/**\n * layout control\n */\nclass LayoutControl extends BaseControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.classNames = new Set();\n        this.selectedClassName = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseControl|null}\n     */\n    addControl(control){\n\n        super.addControl(control);\n\n        control.groupClassName = control.element.getAttribute('data-class') || '';\n        control.selected = control.element.getAttribute('data-selected') === 'true';\n\n        //check if control contains a link and it is in the deep links parameters\n        if(control.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === control.id);\n\n            if(deepLinkParam){\n                control.selected = deepLinkParam.value === '1';\n            }\n            //else{\n                //control.selected = false;\n            //}\n        }\n\n        this.classNames.add(control.groupClassName);\n\n        /**\n         * on button click\n         */\n         control.element.addEventListener('click', (e) => {\n\n             e.preventDefault();\n\n             this.handleSelectedControls(control.groupClassName);\n\n             this.handleClasses();\n\n             if(window.jplist) {\n\n                 window.jplist.refresh(this.group, control);\n             }\n\n         }, false);\n\n        this.handleClasses();\n    }\n\n    /**\n     * add / remove buttons classes\n     */\n     handleClasses(){\n\n        const groups = document.querySelectorAll('[data-jplist-group=\"' + this.group + '\"]');\n\n        //remove classes from all groups\n        this.resetAllGroups(groups);\n\n        let selected = this.getLatestSelectedControl();\n\n        if(!selected) return;\n\n        this.handleSelectedControls(selected.groupClassName);\n\n        //add specified class name to each group\n        LayoutControl.addClassToGroups(selected.groupClassName, groups);\n    }\n\n    /**\n     * get the latest selected control\n     * @return {BaseControl} selected control\n     */\n     getLatestSelectedControl(){\n\n        let selected = null;\n\n        for(let control of this.controls){\n\n            if(control.selected){\n                selected = control;\n            }\n        }\n\n        if(!selected && this.controls.length > 0){\n            selected = this.controls[0];\n        }\n\n        return selected;\n    }\n\n    /**\n     * remove classes from all groups\n     * @param {NodeList} groups\n     */\n     resetAllGroups(groups){\n\n        for(let group of groups){\n\n            //remove all classes\n            for(let cn of this.classNames){\n                group.classList.remove(cn);\n            }\n        }\n    }\n\n    /**\n     * handle selected controls\n     * @param {string} selectedGroupClassName\n     */\n     handleSelectedControls(selectedGroupClassName){\n\n        for(let control of this.controls){\n\n            if(control.groupClassName === selectedGroupClassName){\n                control.selected = true;\n                control.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                control.selected = false;\n                control.element.classList.remove(SELECTED_CLASS);\n            }\n        }\n    }\n\n    /**\n     * add specified class name to each group\n     * @param {string} groupClassName\n     * @param {NodeList} groups\n     */\n    static addClassToGroups(groupClassName, groups){\n\n        for(let group of groups){\n\n            //add class if needed\n            group.classList.add(groupClassName);\n        }\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const arr = this.controls.map(control => {\n\n            if(control.id){\n                return control.selected ? control.id + '=1' : control.id + '=0';\n            }\n            else{\n                return '';\n            }\n\n        }).filter(str => str !== '');\n        const unique = Array.from(new Set(arr));\n        return unique.join('&');\n    }\n}\n\nexport default LayoutControl;","import BaseControlsGroup from '../base/groups/base-controls-group';\n\n/**\n * reset control\n */\nclass ResetControl extends BaseControlsGroup{\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseControl|null}\n     */\n    addControl(control){\n\n        super.addControl(control);\n\n        /**\n         * on button click\n         */\n        control.element.addEventListener('click', (e) => {\n\n            e.preventDefault();\n\n            if(window.jplist) {\n\n                window.jplist.resetControls(this.group, control);\n            }\n\n        }, false);\n    }\n\n}\n\nexport default ResetControl;","import BaseControlsGroup from '../base/groups/base-controls-group';\nimport FilterAction from \"../../actions/filter/filter.action\";\nimport BasePathFilterControl from \"../base/controls/filter/base-path-filter.control\";\nimport BaseTextFilterControl from \"../base/controls/filter/base-text-filter.control\";\nimport BaseRangeFilterControl from \"../base/controls/filter/base-range-filter.control\";\n\n/**\n * counter control\n * Example:\n * <span\n     data-jplist-control=\"counter\"\n     data-group=\"group1\"\n     data-format=\"({count})\"\n     data-path=\".title\"\n     data-mode=\"dynamic\"\n     data-name=\"counter-title-filter\"\n     data-filter-type=\"path\"></span>\n */\nclass CounterControl extends BaseControlsGroup{\n\n    /**\n     * get dynamic counter value\n     * @param {Array.<HTMLElement>} filtered\n     * @param {BaseControl} baseFilterControl\n     * @param {string} filterType - text, path or range\n     * @return {number} count\n     */\n    static getDynamicCounterValue(baseFilterControl, filterType, filtered){\n\n        let count = 0;\n\n        filtered = CounterControl.getFilteredItems(baseFilterControl, filterType, filtered);\n\n        return filtered.length;\n    }\n\n    /**\n     * get static counter value\n     * @param {BaseControl} baseFilterControl\n     * @param {string} filterType - text, path or range\n     * @param {Array.<object>} group\n     * @return {number} count\n     */\n    static getStaticCounterValue(baseFilterControl, filterType, group){\n\n        let count = 0;\n\n        //there can be more than one block of items with the same group name\n        //each itemsBlock has structure: {root: HTMLElement, items: Array.<HTMLElement>}\n        for(let itemsBlock of group){\n\n            let filtered = itemsBlock.items;\n\n            filtered = CounterControl.getFilteredItems(baseFilterControl, filterType, filtered);\n\n            count += filtered.length;\n        }\n\n        return count;\n    }\n\n    /**\n     * get filtered items\n     * @param {BaseControl} baseFilterControl\n     * @param {string} filterType - text, path or range\n     * @param {Array.<HTMLElement>} filtered\n     * @return {Array.<HTMLElement>}\n     */\n    static getFilteredItems(baseFilterControl, filterType, filtered){\n\n        switch(filterType){\n            case 'text' : {\n                filtered = FilterAction.textFilter(\n                    filtered,\n                    baseFilterControl.text,\n                    baseFilterControl.path,\n                    baseFilterControl.mode,\n                    baseFilterControl.regex);\n                break;\n            }\n\n            case 'path' : {\n                filtered = FilterAction.pathFilter(filtered,\n                    baseFilterControl.path,\n                    baseFilterControl.isInverted);\n                break;\n            }\n\n            case 'range' : {\n                filtered = FilterAction.rangeFilter(filtered,\n                    baseFilterControl.path,\n                    baseFilterControl.from,\n                    baseFilterControl.to,\n                    baseFilterControl.min,\n                    baseFilterControl.max);\n                break;\n            }\n        }\n\n        return filtered;\n    }\n\n    /**\n     * render control HTML\n     * @param {number} countValue\n     */\n    render(countValue){\n\n        for(let control of this.controls){\n\n            control.element.innerHTML = control.format.replace('{count}', countValue);\n        }\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseControl|null}\n     */\n    addControl(control){\n\n        super.addControl(control);\n\n        control.filterType = control.element.getAttribute('data-filter-type') || 'path'; //text, path or range\n        control.format = control.element.getAttribute('data-format') || '{count}';\n        control.mode = control.element.getAttribute('data-mode') || 'dynamic'; //static or dynamic\n\n        let baseFilterControl = null;\n\n        switch(control.filterType){\n\n            case 'text' : {\n\n                baseFilterControl = new BaseTextFilterControl(control.element);\n                break;\n            }\n\n            case 'path' : {\n\n                baseFilterControl = new BasePathFilterControl(control.element);\n                break;\n            }\n\n            case 'range' : {\n\n                baseFilterControl = new BaseRangeFilterControl(control.element);\n                break;\n            }\n        }\n\n        control.element.addEventListener('jplist.state', (e) => {\n\n            if(!baseFilterControl || !e.jplistState) return;\n\n            let count = 0;\n\n            if(control.mode === 'static' && e.jplistState.groups && e.jplistState.groups.has(control.group)){\n\n                //find group by name\n                const group = e.jplistState.groups.get(control.group);\n\n                count = CounterControl.getStaticCounterValue(baseFilterControl, control.filterType, group);\n            }\n\n            if(control.mode === 'dynamic' && e.jplistState.filtered && e.jplistState.filtered.length > 0){\n\n                count = CounterControl.getDynamicCounterValue(baseFilterControl, control.filterType, e.jplistState.filtered);\n            }\n\n            //render counter HTML\n            this.render(count);\n\n        }, false);\n    }\n}\n\nexport default CounterControl;"],"sourceRoot":""}